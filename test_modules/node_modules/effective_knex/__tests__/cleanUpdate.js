const _ = require("lodash")
const make_legit = require("make_legit")
const { makeFakes } = require("make_fakes")
const { getInfo, getCleanObject, dataExistsAndMatches, handleCallbacks, cleanPostObject, getObject, postFakeData, getTableBody, makeData } = require("./index")

async function getOne(knex, table, id) {
    let object = await knex(table).select("*").where({ id: id })
    return getObject(object);
}

async function getAll(knex, table) {
    let all = await knex(table).select("*")
    return all
}
async function del(knex, table, id) {
    let deleted = await knex(table).where({ id: id }).del()

    return deleted;
}
module.exports = { getOne, getAll, del }
getOne(knex, "hourglass", 11).then((result) => {
    console.log(result)
})
getAll(knex, "hourglass").then((result) => {
    console.log(result)
})
del(knex, "hourglass", 54).then((result) => {
    console.log(result)
})
const { inputs, callbacks, } = require("./data")
const knex = require("knex")({
    client: "postgresql",
    connection: {
        database: "hbs_auth_temp",
        user: "postgres",
        password: "postgres",
    }
})

/**
 * knexCleanObject.cleanPostObject(knex, )
 * @description
 * 1. Trims object
 * 2. If it has id, will delete it
 * 3. Gets table (only matches with values that has table)
 * 4. Gets keys from that table
 * 5. Loops through array
 * 6. If there is a callback passed in and the key matches the column, then it will assign that to the new object
 * 7. If the column type doesn't match the column value
 * @author zen-out
 * @date 2022-02-16
 * @param {any} knex
 * @param {any} table
 * @param {any} checkObj
 * @param {any} callbacks={}
 * @returns {any}
 */
async function cleanUpdateObject(knex, table, id, checkObj, callbacks = {}) {
    let update = await getCleanObject(knex, table, checkObj, callbacks);
    update = getObject(update)
    let original = await knex(table).select("*").where({ id: id })
    original = getObject(original)
    let merged = _.extend(original, update);

    return merged;
}



// knex("hourglass").select("*").where({ id: 11 }).then((og) => {

//     cleanUpdateObject(knex, "hourglass", 11, inputs["one"], callbacks).then((result) => {
//         console.log("\n")
//         console.log("og", og)
//         console.log("input", inputs["one"])
//         console.log("output", result, "\n")
//     })


// })
async function getCurrentIds() {
    let arr = []
    let getAll = await knex("hourglass").select("id").then((eachOne) => {
        for (let i = 0; i < eachOne.length; i++) {
            console.log(eachOne[i]["id"])
            arr.push(eachOne[i]["id"])
        }
    })
    return arr;
}
async function setup(arr) {
    let getIds = await getCurrentIds()
    console.log("ðŸš€ ~ file: playground.js ~ line 68 ~ setup ~ getIds", getIds)
    for (let i = 0; i < arr.length; i++) {
        let eachSample = inputs[arr[i]]
        let random = getIds[i]
        console.log("ðŸš€ ~ file: playground.js ~ line 71 ~ setup ~ random", random)
        console.log(random)
        console.log()
        knex("hourglass").select("*").where({ id: random }).then((og) => {
            cleanUpdateObject(knex, "hourglass", random, eachSample, callbacks).then((result) => {
                console.log("\n")
                console.log("og", og)
                console.log("input", eachSample);
                console.log("output", result, "\n")
            })
        })
    }

}

let arr = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven"]
setup(arr).then((result) => {
    console.log(result)
})

// cleanUpdateObject(knex, "hourglass", 1, inputs["two"], callbacks).then((result) => {

//     console.log("input", inputs["two"])
//     console.log("output", result, "\n")
// })

// cleanUpdateObject(knex, "hourglass", 144, inputs["three"], callbacks).then((result) => {
//     console.log("input", inputs["three"])
//     console.log("output", result, "\n")
// })
// cleanUpdateObject(knex, "hourglass", 52, inputs["four"], callbacks).then((result) => {
//     console.log("input", inputs["four"])
//     console.log("output", result, "\n")
// })
// cleanUpdateObject(knex, "hourglass", 3, inputs["five"], callbacks).then((result) => {
//     console.log("input", inputs["five"])
//     console.log("output", result, "\n")
// })

// cleanUpdateObject(knex, "hourglass", 4, inputs["six"], callbacks).then((result) => {
//     console.log("input", inputs["six"])
//     console.log("output", result, "\n")
// })


// cleanUpdateObject(knex, "hourglass", 106, inputs["seven"], callbacks).then((result) => {
//     console.log("input", inputs["seven"])
//     console.log("output", result, "\n")
// })

// cleanUpdateObject(knex, "hourglass", 6, inputs["eight"], callbacks).then((result) => {
//     console.log("input", inputs["eight"])
//     console.log("output", result, "\n")
// })

// cleanUpdateObject(knex, "hourglass", 7, inputs["nine"], callbacks).then((result) => {
//     console.log("input", inputs["nine"])
//     console.log("output", result, "\n")
// })

// cleanUpdateObject(knex, "hourglass", 8, inputs["ten"], callbacks).then((result) => {
//     console.log("input", inputs["ten"])
//     console.log("output", result, "\n")
// })


// cleanUpdateObject(knex, "hourglass", 9, inputs["eleven"], callbacks).then((result) => {
//     console.log("input", inputs["eleven"])
//     console.log("output", result, "\n")
// })

// cleanUpdateObject(knex, "hourglass", 10, inputs["twelve"], callbacks).then((result) => {
//     console.log("input", inputs["twelve"])
//     console.log("output", result, "\n")
// })