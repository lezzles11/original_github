const make_legit = require("make_legit")
const { getInfo } = require("./getInfo")
const { dataExistsAndMatches } = require("./dataExistsAndMatches")



/**
 * @example
 * this.handleCallbacks({"importance": function(value) {if column is importance, then return 3}}, "importance", 3)
 * // returns "high"
 * @author zen-out
 * @date 2022-02-16
 * @param {any} callbacks
 * @param {any} columnName
 * @param {any} value
 * @returns {any}
 */
function handleCallbacks(callbacks, columnName, columnType, value) {
    let keys = Object.keys(callbacks)
    let getValue = undefined;
    for (let i = 0; i < keys.length; i++) {
        if (keys[i] === columnName) {
            let getFunction = callbacks[keys[i]]
            getValue = getFunction(value)
        }
    }
    return getValue;
}

/**
 * knexCleanObject.cleanPostObject(knex, )
 * @description 
 * 1. Trims object
 * 2. If it has id, will delete it 
 * 3. Gets table (only matches with values that has table)
 * 4. Gets keys from that table
 * 5. Loops through array 
 * 6. If there is a callback passed in and the key matches the column, then it will assign that to the new object
 * 7. If the column type doesn't match the column value 
 * @author zen-out
 * @date 2022-02-16
 * @param {any} knex
 * @param {any} table
 * @param {any} checkObj
 * @param {any} callbacks={}
 * @returns {any}
 */
async function getCleanObject(knex, table, checkObj, callbacks = {}) {
    checkObj = make_legit.format(checkObj, "object")
    let newObj = {}
    let onlyDataInTable = await dataExistsAndMatches(knex, table, checkObj)
    let existingKeys = Object.keys(onlyDataInTable)
    let tableInfo = await getInfo(knex, table, "object")
    try {
        for (let i = 0; i < existingKeys.length; i++) {
            let columnName = existingKeys[i]
            let currTypeIs = typeof onlyDataInTable[columnName]
            let currTypeShould = tableInfo[columnName]
            let currValue = onlyDataInTable[columnName]
            if (currTypeShould !== currTypeIs) {
                let testIfInCallback;
                if (callbacks !== {}) {
                    testIfInCallback = handleCallbacks(callbacks, columnName, currTypeShould, currValue)
                    if (typeof testIfInCallback === currTypeShould) {
                        newObj[columnName] = testIfInCallback
                    }
                }
                if (testIfInCallback === undefined) {
                    if (currTypeShould === "object") {
                        let getObject = make_legit.format(currValue, "date")
                        newObj[columnName] = getObject
                    } else if (currTypeShould === "number") {
                        let getNumber = make_legit.format(currValue, "number")
                        newObj[columnName] = getNumber
                    } else if (currTypeShould === "boolean") {
                        let getBoolean = make_legit.format(currValue, "boolean")
                        newObj[columnName] = getBoolean
                    } else if (currTypeShould === "string") {
                        let getString = make_legit.format(currValue, "string")
                        newObj[columnName] = getString
                    } else {
                        console.log("error, what did you put here?", currTypeShould, currValue)
                    }
                }
            } else {
                newObj[columnName] = currValue
            }
        }
        newObj = make_legit.clean(newObj)
        return newObj;
    } catch (error) {
        console.error(error)
        return {
            error_location: "cleanPostData function error",
            error_detail: error.detail,
            error: "clean post object error"
        }
    }
}



module.exports = { handleCallbacks, getCleanObject }