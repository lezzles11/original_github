const _ = require("lodash")
const make_legit = require("make_legit")
const { makeFakes } = require("make_fakes")
const { getInfo, getCleanObject, dataExistsAndMatches, handleCallbacks, cleanPostObject, getObject, postFakeData, getTableBody, makeData } = require("./index")
const { inputs, callbacks, } = require("./data")
const knex = require("knex")({
    client: "postgresql",
    connection: {
        database: "hbs_auth_temp",
        user: "postgres",
        password: "postgres",
    }
})



async function logTables() {
    const tables = await inspector.tables().then((tables) => {
        console.log(tables)
    })
    console.log(tables);
}



//refer to: http://troels.arvin.dk/db/rdbms/#cli-list_of_tables
function listTablesAsync(knex) {
    let dialect = knex.client.config.client;
    if (dialect === "postgresql")
        return knex.select("tablename")
            .from("pg_catalog.pg_tables")
            .where('schemaname', "public")
            .then((rst) => rst.map(it => it.tablename))

    else throw new Error(`${dialect} not supported`);
}

listTablesAsync(knex).then((tables) => {
    console.log(tables)
})

async function containsForeignKey(knex, table, table2) {
    let dictionary = {
        timestamp: "object",
        boolean: "boolean",
        character: "string",
        integer: "number"
    }
    let tableInfo = {}
    let tableColumns = []
    let columns = await knex(table).columnInfo()
    console.log(columns)
    for (const property in columns) {
        // console.log("ðŸš€ ~ file: playground.js ~ line 47 ~ containsForeignKey ~ property", property)
        // console.log(columns)
        // if (property !== "created") {

        //     tableColumns.push(property)
        //     let name = property
        //     console.log("ðŸš€ ~ file: playground.js ~ line 52 ~ containsForeignKey ~ name", name)
        //     let first = columns[property]["type"].split(" ")
        //     console.log("ðŸš€ ~ file: playground.js ~ line 54 ~ containsForeignKey ~ first", first)
        //     tableInfo[name] = dictionary[first[0]]

        // }
    }
}

containsForeignKey(knex, "hourglass", "hi").then((result) => {
    console.log("hi")
})
async function deleteFromTable(knex, table, id) {
    let allTables = await listTablesAsync(knex)
    for (let i = 0; i < allTables.length; i++) {


    }
}