const _ = require("lodash")
const { getChance } = require("./modules/getChance")
const { getDirty } = require("./modules/getDirty")
class MakeFakes {
    /**
     * let makeFakes = new MakeFakes()
     * @date 2022-03-02
     * @returns {any}
     */
    constructor() {

        }
        /**
         * makeFakes.getOne("boolean")
         * @date 2022-03-02
         * @param {any} key
         * @returns {any}
         */
    getOne(key) {
            if (typeof key !== "string") {

                return getChance.getArrayOptions(key)

            } else {

                switch (key) {
                    case "paragraph":
                        return getChance.paragraph()
                    case "boolean":
                        return getChance.boolean()
                    case "number":
                        return getChance.number()
                    case "email":
                        return getChance.email();
                    case "string":
                        return getChance.string()
                    case "password":
                        return getChance.password()
                    case "past_date":
                        return getChance.past_date()
                    case "future_date":
                        return getChance.future_date()
                    case "number_date":
                        return getChance.number_date()
                    case "phone":
                        return getChance.phone()
                    case "image":
                        return getChance.image()
                    case "date":
                        return getChance.date()
                    default:
                        return getChance.getArrayOptions(key)
                }
            }
        }
        /**
* makeFakes.createOne(object)
* @example
* let getOne = makeFakes.createOne(hourglass)
* let hourglass = {
public: "boolean",
seconds: "number",
start: "past_date",
end: "future_date",
status: ["to do", "doing", "done"],
title: "string",
email: "email",
created: "number_date"
}
// output {
public: true,
seconds: 60,
start: 2022-01-19T19:12:02.649Z,
end: 2022-11-05T16:03:38.641Z,
status: 'to do',
title: 'recusandae',
email: 'Daron.Davis@gmail.com',
created: 1646170430367
}
* @date 2022-03-02
* @param {any} object
* @returns {any}
*/
    createOne(object, needThese, currIndex) {
            let values = Object.keys(object)
            let newObj = {}
            for (let i = 0; i < values.length; i++) {
                let eachKey = values[i]
                let eachValue = object[eachKey]
                if (eachValue === "foreign_id") {
                    newObj[eachKey] = currIndex;
                } else {
                    let getRandom = this.getOne(eachValue)
                    newObj[eachKey] = getRandom
                }

            }
            let merged = _.extend(newObj, needThese);
            return merged;
        }
        /**
* @description 
* Returns realistic fake dirty data
* boolean -> boolean to string or undefined 
* number -> stringed number, float, undefined 
* email -> string, number, undefined
* password -> " ", undefined, paragraph,
* past_date -> dateInput format, LL format, undefined
* future_date -> L format, l format, undefined
* number_date -> dateInput format, ll format
* phone -> future_date, boolean, undefined
* image -> string, " ", undefined
* @example 
//input let hourglass = {
public: "boolean",
seconds: "number",
start: "past_date",
end: "future_date",
edit: "date",
status: ["to do", "doing", "done"],
title: "string",
email: "email",
created: "number_date"
}

* output // { public: 'true', 
seconds: 86421.89, 
start: '2021-10-14', 
end: '07/17/2022', 
status: undefined, 
title: 102, 
email: 6, 
created: '2022-06-23' } 
* @date 2022-03-02
* @param {any} object
* @param {any} currIndex
* @returns {any}
*/
    createOneDirty(object, needThese, currIndex) {
            let values = Object.keys(object)
            let newObj = {}
            for (let i = 0; i < values.length; i++) {
                let eachKey = values[i]
                let eachValue = object[eachKey]
                if (eachValue === "foreign_id") {
                    newObj[eachKey] = currIndex;
                } else {
                    let getRandom = getDirty(eachValue)
                    newObj[eachKey] = getRandom
                }

            }

            let merged = _.extend(newObj, needThese);
            return merged;
        }
        /**
* let getArray = makeFakes.createMany(hourglass, number)

* @example 
* let getArray = makeFakes.createMany(hourglass, 3)
* let hourglass = {
public: "boolean",
seconds: "number",
start: "past_date",
end: "future_date",
status: ["to do", "doing", "done"],
title: "string",
email: "email",
created: "number_date"
}
* [
{
public: false,
seconds: 156,
start: 2021-03-27T04:26:13.008Z,
end: 2022-08-11T17:11:58.936Z,
status: 'done',
title: 'voluptates',
email: 'Winston.Hayes@gmail.com',
created: 1646170499317,
id: 1
},
{
public: false,
seconds: 69,
start: 2021-09-19T18:13:01.908Z,
end: 2022-11-22T00:39:23.213Z,
status: 'doing',
title: 'blanditiis',
email: 'Greyson.Roob@yahoo.com',
created: 1646170499317,
id: 2
},
{
public: false,
seconds: 163,
start: 2021-10-14T04:50:07.263Z,
end: 2022-04-02T03:39:40.203Z,
status: 'done',
title: 'reiciendis',
email: 'Braden_Baumbach97@gmail.com',
created: 1646170499317,
id: 3
}
]
* @date 2022-03-02
* @param {any} object
* @param {any} length=1
* @param {any} addId=false
* @returns {array}
*/
    createMany(object, length = 1, addId = false, mustHave) {
            let newArr = []
            for (let i = 0; i < length; i++) {
                let id = i + 1;
                let newObj = this.createOne(object, mustHave, id)

                if (addId === true) {
                    newObj["id"] = id;
                }
                newArr.push(newObj)
            }
            return newArr
        }
        /**
* makeFakes.createManyDirty(hourglass, 2)
* @example
* // input 
* let hourglass = {
public: "boolean",
seconds: "number",
start: "past_date",
end: "future_date",
status: ["to do", "doing", "done"],
title: "string",
email: "email",
created: "number_date"
}
// output 
*  [ { public: undefined, 
seconds: '113', 
start: 'November 18, 2022', 
end: undefined, 
status: undefined, 
title: 35, 
email: 'voluptatum', 
created: undefined }, 
{ public: undefined, 
seconds: 80670.32, 
start: undefined, 
end: undefined, 
status: undefined, 
title: 75, 
email: undefined, 
created: 'Jan 16, 2023' } ] 
* @date 2022-03-02
* @param {any} object
* @param {any} length=1
* @param {any} addId=false
* @returns {any}
*/
    createManyDirty(object, length = 1, addId = false, mustHave) {
        let newArr = []
        for (let i = 0; i < length; i++) {
            let id = i + 1;
            let newObj = this.createOneDirty(object, mustHave, id)
            if (addId === true) {
                newObj["id"] = id;
            }
            newArr.push(newObj)
        }
        return newArr
    }
}

let makeFakes = new MakeFakes()


module.exports = { makeFakes }