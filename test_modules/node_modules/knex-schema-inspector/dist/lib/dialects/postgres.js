"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Postgres = /** @class */ (function () {
    function Postgres(knex) {
        this.knex = knex;
        var config = knex.client.config;
        if (!config.searchPath) {
            this.schema = 'public';
            this.explodedSchema = [this.schema];
        }
        else if (typeof config.searchPath === 'string') {
            this.schema = config.searchPath;
            this.explodedSchema = [config.searchPath];
        }
        else {
            this.schema = config.searchPath[0];
            this.explodedSchema = config.searchPath;
        }
    }
    // Postgres specific
    // ===============================================================================================
    /**
     * Set the schema to be used in other methods
     */
    Postgres.prototype.withSchema = function (schema) {
        this.schema = schema;
        this.explodedSchema = [this.schema];
        return this;
    };
    /**
     * Converts Postgres default value to JS
     * Eg `'example'::character varying` => `example`
     */
    Postgres.prototype.parseDefaultValue = function (type) {
        if (type.startsWith('nextval('))
            return null; // auto-increment
        var parts = type.split('::');
        var value = parts[0];
        if (value.startsWith("'") && value.endsWith("'")) {
            value = value.slice(1, -1);
        }
        if (parts[1] && parts[1].includes('json'))
            return JSON.parse(value);
        if (parts[1] && (parts[1].includes('char') || parts[1].includes('text')))
            return String(value);
        if (Number.isNaN(Number(value)))
            return value;
        return Number(value);
    };
    // Tables
    // ===============================================================================================
    /**
     * List all existing tables in the current schema/database
     */
    Postgres.prototype.tables = function () {
        return __awaiter(this, void 0, void 0, function () {
            var records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('tablename')
                            .from('pg_catalog.pg_tables')
                            .whereIn('schemaname', this.explodedSchema)];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var tablename = _a.tablename;
                                return tablename;
                            })];
                }
            });
        });
    };
    Postgres.prototype.tableInfo = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, rawTable, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('table_name', 'table_schema', this.knex
                            .select(this.knex.raw('obj_description(oid)'))
                            .from('pg_class')
                            .where({ relkind: 'r' })
                            .andWhere({ relname: 'table_name ' })
                            .as('table_comment'))
                            .from('information_schema.tables')
                            .whereIn('table_schema', this.explodedSchema)
                            .andWhere({ table_catalog: this.knex.client.database() })
                            .andWhere({ table_type: 'BASE TABLE' })
                            .orderBy('table_name', 'asc');
                        if (!table) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ table_name: table })
                                .limit(1)
                                .first()];
                    case 1:
                        rawTable = _a.sent();
                        return [2 /*return*/, {
                                name: rawTable.table_name,
                                schema: rawTable.table_schema,
                                comment: rawTable.table_comment,
                            }];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (rawTable) {
                                return {
                                    name: rawTable.table_name,
                                    schema: rawTable.table_schema,
                                    comment: rawTable.table_comment,
                                };
                            })];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    Postgres.prototype.hasTable = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var subquery, record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subquery = this.knex
                            .select()
                            .from('information_schema.tables')
                            .whereIn('table_schema', this.explodedSchema)
                            .andWhere({ table_name: table });
                        return [4 /*yield*/, this.knex
                                .select(this.knex.raw('exists (?)', [subquery]))
                                .first()];
                    case 1:
                        record = _a.sent();
                        return [2 /*return*/, (record === null || record === void 0 ? void 0 : record.exists) || false];
                }
            });
        });
    };
    // Columns
    // ===============================================================================================
    /**
     * Get all the available columns in the current schema/database. Can be filtered to a specific table
     */
    Postgres.prototype.columns = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('table_name', 'column_name')
                            .from('information_schema.columns')
                            .whereIn('table_schema', this.explodedSchema);
                        if (table) {
                            query.andWhere({ table_name: table });
                        }
                        return [4 /*yield*/, query];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var table_name = _a.table_name, column_name = _a.column_name;
                                return ({
                                    table: table_name,
                                    column: column_name,
                                });
                            })];
                }
            });
        });
    };
    Postgres.prototype.columnInfo = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var knex, query, rawColumn, records;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        knex = this.knex;
                        query = knex
                            .select('c.column_name', 'c.table_name', 'c.data_type', 'c.column_default', 'c.character_maximum_length', 'c.is_nullable', 'c.numeric_precision', 'c.numeric_scale', 'c.table_schema', knex
                            .select(knex.raw("'YES'"))
                            .from('pg_index')
                            .join('pg_attribute', function () {
                            this.on('pg_attribute.attrelid', '=', 'pg_index.indrelid').andOn(knex.raw('pg_attribute.attnum = any(pg_index.indkey)'));
                        })
                            .whereRaw('pg_index.indrelid = c.table_name::regclass')
                            .andWhere(knex.raw('pg_attribute.attname = c.column_name'))
                            .andWhere(knex.raw('pg_index.indisprimary'))
                            .as('is_primary'), knex
                            .select(knex.raw("'YES'"))
                            .from('pg_index')
                            .join('pg_attribute', function () {
                            this.on('pg_attribute.attrelid', '=', 'pg_index.indrelid').andOn(knex.raw('pg_attribute.attnum = any(pg_index.indkey)'));
                        })
                            .whereRaw('pg_index.indrelid = c.table_name::regclass')
                            .andWhere(knex.raw('pg_attribute.attname = c.column_name'))
                            .andWhere(knex.raw('pg_index.indisunique'))
                            .as('is_unique'), knex
                            .select(knex.raw('pg_catalog.col_description(pg_catalog.pg_class.oid, c.ordinal_position:: int)'))
                            .from('pg_catalog.pg_class')
                            .whereRaw("pg_catalog.pg_class.oid = (select('\"' || c.table_name || '\"'):: regclass:: oid)")
                            .andWhere({ 'pg_catalog.pg_class.relname': 'c.table_name' })
                            .as('column_comment'), knex.raw('pg_get_serial_sequence(c.table_name, c.column_name) as serial'), 'ffk.referenced_table_schema', 'ffk.referenced_table_name', 'ffk.referenced_column_name')
                            .from(knex.raw('information_schema.columns c'))
                            .joinRaw("\n        LEFT JOIN (\n          SELECT\n            k1.table_schema,\n            k1.table_name,\n            k1.column_name,\n            k2.table_schema AS referenced_table_schema,\n            k2.table_name AS referenced_table_name,\n            k2.column_name AS referenced_column_name\n          FROM\n            information_schema.key_column_usage k1\n            JOIN information_schema.referential_constraints fk using (\n              constraint_schema, constraint_name\n            )\n            JOIN information_schema.key_column_usage k2 ON k2.constraint_schema = fk.unique_constraint_schema\n            AND k2.constraint_name = fk.unique_constraint_name\n            AND k2.ordinal_position = k1.position_in_unique_constraint\n        ) ffk ON ffk.table_name = c.table_name\n        AND ffk.column_name = c.column_name\n      ")
                            .whereIn('c.table_schema', this.explodedSchema);
                        if (table) {
                            query.andWhere({ 'c.table_name': table });
                        }
                        if (!column) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ 'c.column_name': column })
                                .first()];
                    case 1:
                        rawColumn = _a.sent();
                        return [2 /*return*/, {
                                name: rawColumn.column_name,
                                table: rawColumn.table_name,
                                type: rawColumn.data_type,
                                default_value: rawColumn.column_default
                                    ? this.parseDefaultValue(rawColumn.column_default)
                                    : null,
                                max_length: rawColumn.character_maximum_length,
                                precision: rawColumn.numeric_precision,
                                scale: rawColumn.numeric_scale,
                                is_nullable: rawColumn.is_nullable === 'YES',
                                is_unique: rawColumn.is_unique === 'YES',
                                is_primary_key: rawColumn.is_primary === 'YES',
                                has_auto_increment: rawColumn.serial !== null,
                                foreign_key_column: rawColumn.referenced_column_name,
                                foreign_key_table: rawColumn.referenced_table_name,
                                comment: rawColumn.column_comment,
                                schema: rawColumn.table_schema,
                                foreign_key_schema: rawColumn.referenced_table_schema,
                            }];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (rawColumn) {
                                return {
                                    name: rawColumn.column_name,
                                    table: rawColumn.table_name,
                                    type: rawColumn.data_type,
                                    default_value: rawColumn.column_default
                                        ? _this.parseDefaultValue(rawColumn.column_default)
                                        : null,
                                    max_length: rawColumn.character_maximum_length,
                                    precision: rawColumn.numeric_precision,
                                    scale: rawColumn.numeric_scale,
                                    is_nullable: rawColumn.is_nullable === 'YES',
                                    is_unique: rawColumn.is_unique === 'YES',
                                    is_primary_key: rawColumn.is_primary === 'YES',
                                    has_auto_increment: rawColumn.serial !== null,
                                    foreign_key_column: rawColumn.referenced_column_name,
                                    foreign_key_table: rawColumn.referenced_table_name,
                                    comment: rawColumn.column_comment,
                                    schema: rawColumn.table_schema,
                                    foreign_key_schema: rawColumn.referenced_table_schema,
                                };
                            })];
                }
            });
        });
    };
    /**
     * Check if the given table contains the given column
     */
    Postgres.prototype.hasColumn = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var subquery, record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subquery = this.knex
                            .select()
                            .from('information_schema.columns')
                            .whereIn('table_schema', this.explodedSchema)
                            .andWhere({
                            table_name: table,
                            column_name: column,
                        });
                        return [4 /*yield*/, this.knex
                                .select(this.knex.raw('exists (?)', [subquery]))
                                .first()];
                    case 1:
                        record = _a.sent();
                        return [2 /*return*/, (record === null || record === void 0 ? void 0 : record.exists) || false];
                }
            });
        });
    };
    /**
     * Get the primary key column for the given table
     */
    Postgres.prototype.primary = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('information_schema.key_column_usage.column_name')
                            .from('information_schema.key_column_usage')
                            .leftJoin('information_schema.table_constraints', 'information_schema.table_constraints.constraint_name', 'information_schema.key_column_usage.constraint_name')
                            .whereIn('information_schema.table_constraints.table_schema', this.explodedSchema)
                            .andWhere({
                            'information_schema.table_constraints.constraint_type': 'PRIMARY KEY',
                            'information_schema.table_constraints.table_name': table,
                        })
                            .first()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result ? result.column_name : null];
                }
            });
        });
    };
    return Postgres;
}());
exports.default = Postgres;
