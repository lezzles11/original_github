"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var oracleDB = /** @class */ (function () {
    function oracleDB(knex) {
        this.knex = knex;
    }
    // Tables
    // ===============================================================================================
    /**
     * List all existing tables in the current schema/database
     */
    oracleDB.prototype.tables = function () {
        return __awaiter(this, void 0, void 0, function () {
            var records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('TABLE_NAME')
                            .from('DBA_TABLES')];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var TABLE_NAME = _a.TABLE_NAME;
                                return TABLE_NAME;
                            })];
                }
            });
        });
    };
    oracleDB.prototype.tableInfo = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, rawTable, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex.select('TABLE_NAME', 'OWNER').from('DBA_TABLES');
                        if (!table) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ TABLE_NAME: table })
                                .first()];
                    case 1:
                        rawTable = _a.sent();
                        return [2 /*return*/, {
                                name: rawTable.TABLE_NAME,
                                schema: rawTable.SCHEMA_NAME,
                            }];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (rawTable) {
                                return {
                                    name: rawTable.TABLE_NAME,
                                    schema: rawTable.SCHEMA_NAME,
                                };
                            })];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    oracleDB.prototype.hasTable = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .count({ count: '*' })
                            .from('DBA_TABLES')
                            .where({ TABLE_NAME: table })
                            .first()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, (result && result.count === 1) || false];
                }
            });
        });
    };
    // Columns
    // ===============================================================================================
    /**
     * Get all the available columns in the current schema/database. Can be filtered to a specific table
     */
    oracleDB.prototype.columns = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('TABLE_NAME', 'COLUMN_NAME')
                            .from('DBA_TAB_COLUMNS');
                        if (table) {
                            query.andWhere({ TABLE_NAME: table });
                        }
                        return [4 /*yield*/, query];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var TABLE_NAME = _a.TABLE_NAME, COLUMN_NAME = _a.COLUMN_NAME;
                                return ({
                                    table: TABLE_NAME,
                                    column: COLUMN_NAME,
                                });
                            })];
                }
            });
        });
    };
    oracleDB.prototype.columnInfo = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var query, rawColumn, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('c.TABLE_NAME', 'c.COLUMN_NAME', 'c.DATA_DEFAULT', 'c.DATA_TYPE', 'c.DATA_LENGTH', 'c.DATA_PRECISION', 'c.DATA_SCALE', 'c.NULLABLE', 'pk.CONSTRAINT_NAME', 'pk.CONSTRAINT_TYPE', 'cm.COMMENTS AS COLUMN_COMMENT', 'fk.TABLE_NAME as REFERENCE_TABLE_NAME', 'fk.COLUMN_NAME as REFERENCED_COLUMN_NAME', 'rc.DELETE_RULE', 'rc.SEARCH_CONDITION')
                            .from('DBA_TAB_COLUMNS as c')
                            .leftJoin('DBA_COL_COMMENTS as cm', function () {
                            this.on('c.TABLE_NAME', '=', 'cm.TABLE_NAME')
                                .andOn('cm.COLUMN_NAME', '=', 'c.COLUMN_NAME')
                                .andOn('cm.OWNER', '=', 'c.OWNER');
                        })
                            .leftJoin('all_constraints  as pk', function () {
                            this.on('c.TABLE_NAME', '=', 'pk.TABLE_NAME')
                                .andOn('c.CONSTRAINT_NAME', '=', 'pk.CONSTRAINT_NAME')
                                .andOn('c.OWNER', '=', 'pk.OWNER');
                        })
                            .where({ 'pk.CONSTRAINT_TYPE': 'P' })
                            .leftJoin('all_constraints  as fk', function () {
                            this.on('c.TABLE_NAME', '=', 'fk.TABLE_NAME')
                                .andOn('c.CONSTRAINT_NAME', '=', 'fk.CONSTRAINT_NAME')
                                .andOn('c.OWNER', '=', 'fk.OWNER');
                        })
                            .where({ 'fk.CONSTRAINT_TYPE': 'R' })
                            .leftJoin('all_constraints  as rc', function () {
                            this.on('c.TABLE_NAME', '=', 'rc.TABLE_NAME')
                                .andOn('c.CONSTRAINT_NAME', '=', 'rc.CONSTRAINT_NAME')
                                .andOn('c.OWNER', '=', 'rc.OWNER');
                        });
                        if (table) {
                            query.andWhere({ 'c.TABLE_NAME': table });
                        }
                        if (!column) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ 'c.column_name': column })
                                .first()];
                    case 1:
                        rawColumn = _a.sent();
                        return [2 /*return*/, {
                                name: rawColumn.COLUMN_NAME,
                                table: rawColumn.TABLE_NAME,
                                type: rawColumn.DATA_TYPE,
                                default_value: rawColumn.DATA_DEFAULT,
                                max_length: rawColumn.DATA_LENGTH,
                                precision: rawColumn.DATA_PRECISION,
                                scale: rawColumn.DATA_SCALE,
                                is_nullable: rawColumn.NULLABLE === 'YES',
                                is_primary_key: rawColumn.CONSTRAINT_TYPE === 'P',
                                foreign_key_column: rawColumn.REFERENCED_COLUMN_NAME,
                                foreign_key_table: rawColumn.REFERENCED_TABLE_NAME,
                                comment: rawColumn.COLUMN_COMMENT,
                            }];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (rawColumn) {
                                return {
                                    name: rawColumn.COLUMN_NAME,
                                    table: rawColumn.TABLE_NAME,
                                    type: rawColumn.DATA_TYPE,
                                    default_value: rawColumn.DATA_DEFAULT,
                                    max_length: rawColumn.DATA_DEFAULT,
                                    precision: rawColumn.DATA_PRECISION,
                                    scale: rawColumn.DATA_SCALE,
                                    is_nullable: rawColumn.NULLABLE === 'YES',
                                    is_unique: false,
                                    is_primary_key: rawColumn.CONSTRAINT_TYPE === 'P',
                                    has_auto_increment: rawColumn.DATA_DEFAULT,
                                    foreign_key_column: rawColumn.REFERENCED_COLUMN_NAME,
                                    foreign_key_table: rawColumn.REFERENCED_TABLE_NAME,
                                    comment: rawColumn.COLUMN_COMMENT,
                                };
                            })];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    oracleDB.prototype.hasColumn = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var count;
            return __generator(this, function (_a) {
                count = this.knex
                    .count({ count: '*' })
                    .from('DBA_TAB_COLUMNS')
                    .where({
                    table_schema: this.knex.client.database(),
                    table_name: table,
                    column_name: column,
                })
                    .first().count;
                return [2 /*return*/, !!count];
            });
        });
    };
    /**
     * Get the primary key column for the given table
     */
    oracleDB.prototype.primary = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var column_name;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('all_constraints.column_name')
                            .from('all_constraints')
                            .where({
                            'all_constraints.CONSTRAINT_TYPE': 'P',
                            'all_constraints.TABLE_NAME': table,
                        })
                            .first()];
                    case 1:
                        column_name = (_a.sent()).column_name;
                        return [2 /*return*/, column_name];
                }
            });
        });
    };
    return oracleDB;
}());
exports.default = oracleDB;
