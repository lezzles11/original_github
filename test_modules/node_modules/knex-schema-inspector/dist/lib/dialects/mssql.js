"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var MSSQL = /** @class */ (function () {
    function MSSQL(knex) {
        this.knex = knex;
    }
    // Tables
    // ===============================================================================================
    /**
     * List all existing tables in the current schema/database
     */
    MSSQL.prototype.tables = function () {
        return __awaiter(this, void 0, void 0, function () {
            var records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('TABLE_NAME')
                            .from('INFORMATION_SCHEMA.TABLES')
                            .where({
                            TABLE_TYPE: 'BASE TABLE',
                            TABLE_CATALOG: this.knex.client.database(),
                        })];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var TABLE_NAME = _a.TABLE_NAME;
                                return TABLE_NAME;
                            })];
                }
            });
        });
    };
    MSSQL.prototype.tableInfo = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, rawTable, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('TABLE_NAME', 'TABLE_SCHEMA', 'TABLE_CATALOG', 'TABLE_TYPE')
                            .from('information_schema.tables')
                            .where({
                            TABLE_CATALOG: this.knex.client.database(),
                            TABLE_TYPE: 'BASE TABLE',
                        });
                        if (!table) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ table_name: table })
                                .first()];
                    case 1:
                        rawTable = _a.sent();
                        return [2 /*return*/, {
                                name: rawTable.TABLE_NAME,
                                schema: rawTable.TABLE_SCHEMA,
                                catalog: rawTable.TABLE_CATALOG,
                            }];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (rawTable) {
                                return {
                                    name: rawTable.TABLE_NAME,
                                    schema: rawTable.TABLE_SCHEMA,
                                    catalog: rawTable.TABLE_CATALOG,
                                };
                            })];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    MSSQL.prototype.hasTable = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .count({ count: '*' })
                            .from('information_schema.tables')
                            .where({ TABLE_CATALOG: this.knex.client.database(), table_name: table })
                            .first()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, (result && result.count === 1) || false];
                }
            });
        });
    };
    // Columns
    // ===============================================================================================
    /**
     * Get all the available columns in the current schema/database. Can be filtered to a specific table
     */
    MSSQL.prototype.columns = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('TABLE_NAME', 'COLUMN_NAME')
                            .from('INFORMATION_SCHEMA.COLUMNS')
                            .where({ TABLE_CATALOG: this.knex.client.database() });
                        if (table) {
                            query.andWhere({ TABLE_NAME: table });
                        }
                        return [4 /*yield*/, query];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var TABLE_NAME = _a.TABLE_NAME, COLUMN_NAME = _a.COLUMN_NAME;
                                return ({
                                    table: TABLE_NAME,
                                    column: COLUMN_NAME,
                                });
                            })];
                }
            });
        });
    };
    MSSQL.prototype.columnInfo = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            function parseDefault(value) {
                // MariaDB returns string NULL for not-nullable varchar fields
                if (value === 'NULL' || value === 'null')
                    return null;
                return value;
            }
            var dbName, query, rawColumn, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dbName = this.knex.client.database();
                        query = this.knex
                            .select('c.TABLE_NAME', 'c.COLUMN_NAME', 'c.COLUMN_DEFAULT', 'c.DATA_TYPE', 'c.CHARACTER_MAXIMUM_LENGTH', 'c.NUMERIC_PRECISION', 'c.NUMERIC_SCALE', 'c.IS_NULLABLE', 'c.COLLATION_NAME', 'pk.CONSTRAINT_TABLE_NAME', 'pk.CONSTRAINT_COLUMN_NAME', 'pk.CONSTRAINT_NAME', 'pk.PK_SET', 'rc.UPDATE_RULE', 'rc.DELETE_RULE', 'rc.MATCH_OPTION', 'cu.IS_UNIQUE')
                            .from(dbName + '.INFORMATION_SCHEMA.COLUMNS AS c')
                            .joinRaw("\n        LEFT JOIN (\n          SELECT\n            CONSTRAINT_NAME AS CONSTRAINT_NAME,\n            TABLE_NAME AS CONSTRAINT_TABLE_NAME,\n            COLUMN_NAME AS CONSTRAINT_COLUMN_NAME,\n            CONSTRAINT_CATALOG,\n            CONSTRAINT_SCHEMA,\n            PK_SET = CASE WHEN CONSTRAINT_NAME LIKE '%pk%'\n            THEN 'PRIMARY'\n            ELSE NULL\n            END\n          FROM " + dbName + ".INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n        ) as pk\n          ON [c].[TABLE_NAME] = [pk].[CONSTRAINT_TABLE_NAME]\n          AND [c].[TABLE_CATALOG] = [pk].[CONSTRAINT_CATALOG]\n          AND [c].[COLUMN_NAME] = [pk].[CONSTRAINT_COLUMN_NAME]\n        ")
                            .joinRaw("\n        LEFT JOIN (\n          SELECT\n            CONSTRAINT_NAME,\n            CONSTRAINT_CATALOG,\n            CONSTRAINT_SCHEMA,\n            MATCH_OPTION,\n            DELETE_RULE,\n            UPDATE_RULE\n          FROM " + dbName + ".INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS\n        ) AS rc\n        ON [pk].[CONSTRAINT_NAME] = [rc].[CONSTRAINT_NAME]\n        AND [pk].[CONSTRAINT_CATALOG] = [rc].[CONSTRAINT_CATALOG]\n        AND [pk].[CONSTRAINT_SCHEMA] = [rc].[CONSTRAINT_SCHEMA]\n      ")
                            .joinRaw("\n        LEFT JOIN (\n          SELECT\n            COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') AS EXTRA,\n            TABLE_NAME,\n            COLUMN_NAME,\n            TABLE_CATALOG\n          FROM\n            INFORMATION_SCHEMA.COLUMNS\n          WHERE\n            COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1) AS ac\n            ON [c].[TABLE_NAME] = [ac].[TABLE_NAME]\n            AND [c].[TABLE_CATALOG] = [ac].[TABLE_CATALOG]\n            AND [c].[COLUMN_NAME] = [ac].[COLUMN_NAME]\n        ")
                            .joinRaw("\n        LEFT JOIN (\n          SELECT\n            Tab.*,\n            IS_UNIQUE = CASE\n            WHEN CONSTRAINT_TYPE = 'UNIQUE'\n            THEN 'YES'\n            ELSE NULL\n            END\n            FROM\n              INFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab,\n              INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col\n            WHERE\n              Col.Constraint_Name = Tab.Constraint_Name\n              AND Col.Table_Name = Tab.Table_Name\n              AND Tab.CONSTRAINT_TYPE = 'UNIQUE'\n        ) AS cu\n        ON [c].[TABLE_NAME] = [cu].[Table_Name]\n        AND [c].[COLUMN_NAME] = [cu].[Constraint_Name]\n        AND [c].[TABLE_CATALOG] =[cu].[TABLE_CATALOG]\n        ")
                            .where({
                            'c.TABLE_CATALOG': this.knex.client.database(),
                        });
                        if (table) {
                            query.andWhere({ 'c.TABLE_NAME': table });
                        }
                        if (!column) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ 'c.column_name': column })
                                .first()];
                    case 1:
                        rawColumn = _a.sent();
                        return [2 /*return*/, {
                                name: rawColumn.COLUMN_NAME,
                                table: rawColumn.TABLE_NAME,
                                type: rawColumn.DATA_TYPE,
                                default_value: parseDefault(rawColumn.COLUMN_DEFAULT),
                                max_length: rawColumn.CHARACTER_MAXIMUM_LENGTH,
                                precision: rawColumn.NUMERIC_PRECISION,
                                scale: rawColumn.NUMERIC_SCALE,
                                is_nullable: rawColumn.IS_NULLABLE === 'YES',
                                is_unique: rawColumn.IS_UNIQUE === 'YES',
                                is_primary_key: rawColumn.PK_SET === 'PRIMARY',
                                has_auto_increment: rawColumn.PK_SET === 'PRIMARY',
                                // TODO: contraints column name and table name have some issues
                                foreign_key_column: rawColumn.CONSTRAINT_COLUMN_NAME,
                                foreign_key_table: rawColumn.CONSTRAINT_TABLE_NAME,
                            }];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (rawColumn) {
                                return {
                                    name: rawColumn.COLUMN_NAME,
                                    table: rawColumn.TABLE_NAME,
                                    type: rawColumn.DATA_TYPE,
                                    default_value: parseDefault(rawColumn.COLUMN_DEFAULT),
                                    max_length: rawColumn.CHARACTER_MAXIMUM_LENGTH,
                                    precision: rawColumn.NUMERIC_PRECISION,
                                    scale: rawColumn.NUMERIC_SCALE,
                                    is_nullable: rawColumn.IS_NULLABLE === 'YES',
                                    is_unique: rawColumn.IS_UNIQUE === 'YES',
                                    is_primary_key: rawColumn.PK_SET === 'PRIMARY',
                                    has_auto_increment: rawColumn.PK_SET === 'PRIMARY',
                                    // TODO: contraints column name and table name have some issues
                                    foreign_key_column: rawColumn.CONSTRAINT_COLUMN_NAME,
                                    foreign_key_table: rawColumn.CONSTRAINT_TABLE_NAME,
                                };
                            })];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    MSSQL.prototype.hasColumn = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var count;
            return __generator(this, function (_a) {
                count = this.knex
                    .count({ count: '*' })
                    .from('information_schema.tables')
                    .where({
                    TABLE_CATALOG: this.knex.client.database(),
                    TABLE_NAME: table,
                    COLUMN_NAME: column,
                })
                    .first().count;
                return [2 /*return*/, !!count];
            });
        });
    };
    /**
     * Get the primary key column for the given table
     */
    MSSQL.prototype.primary = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var results, columnName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex.raw("SELECT\n        Col.Column_Name\n      FROM\n        INFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab,\n        INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col\n      WHERE\n        Col.Constraint_Name = Tab.Constraint_Name\n        AND Col.Table_Name = Tab.Table_Name\n        AND Constraint_Type = 'PRIMARY KEY'\n        AND Col.Table_Name = '" + table + "'")];
                    case 1:
                        results = _a.sent();
                        columnName = results.length > 0 ? results[0]['Column_Name'] : null;
                        return [2 /*return*/, columnName];
                }
            });
        });
    };
    return MSSQL;
}());
exports.default = MSSQL;
