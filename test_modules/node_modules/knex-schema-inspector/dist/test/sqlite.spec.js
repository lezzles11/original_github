"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var knex_1 = __importDefault(require("knex"));
var chai_1 = require("chai");
var lib_1 = __importDefault(require("../lib"));
describe('sqlite', function () {
    var database;
    var inspector;
    before(function () {
        database = knex_1.default({
            client: 'sqlite3',
            connection: {
                filename: './test/db/sqlite.db',
            },
        });
        inspector = lib_1.default(database);
    });
    after(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, database.destroy()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    describe('.tables', function () {
        it('returns tables', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.tables()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal([
                            'page_visits',
                            'teams',
                            'users',
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.tableInfo', function () {
        it('returns information for all tables', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.tableInfo()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal([
                            {
                                name: 'page_visits',
                                sql: 'CREATE TABLE page_visits (\n' +
                                    '  request_path varchar(100)\n' +
                                    ',  user_agent varchar(200)\n' +
                                    ',  created_at datetime\n' +
                                    ')',
                            },
                            {
                                name: 'teams',
                                sql: 'CREATE TABLE "teams" (\n' +
                                    '\t"id"\tINTEGER NOT NULL,\n' +
                                    '\t"uuid"\tvarchar(36) NOT NULL UNIQUE,\n' +
                                    '\t"name"\tvarchar(100),\n' +
                                    '\t"description"\ttext,\n' +
                                    '\t"credits"\tinteger,\n' +
                                    '\t"created_at"\tdatetime,\n' +
                                    '\t"activated_at"\tdate,\n' +
                                    '\tPRIMARY KEY("id" AUTOINCREMENT)\n' +
                                    ')',
                            },
                            {
                                name: 'users',
                                sql: 'CREATE TABLE "users" (\n' +
                                    '\t"id"\tINTEGER NOT NULL,\n' +
                                    '\t"team_id"\tinteger NOT NULL,\n' +
                                    '\t"email"\tvarchar(100),\n' +
                                    '\t"password"\tvarchar(60),\n' +
                                    '\tPRIMARY KEY("id" AUTOINCREMENT),\n' +
                                    '\tFOREIGN KEY("team_id") REFERENCES "teams"("id")\n' +
                                    ')',
                            },
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns information for specific table', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.tableInfo('teams')];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal({
                            name: 'teams',
                            sql: 'CREATE TABLE "teams" (\n' +
                                '\t"id"\tINTEGER NOT NULL,\n' +
                                '\t"uuid"\tvarchar(36) NOT NULL UNIQUE,\n' +
                                '\t"name"\tvarchar(100),\n' +
                                '\t"description"\ttext,\n' +
                                '\t"credits"\tinteger,\n' +
                                '\t"created_at"\tdatetime,\n' +
                                '\t"activated_at"\tdate,\n' +
                                '\tPRIMARY KEY("id" AUTOINCREMENT)\n' +
                                ')',
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.hasTable', function () {
        it('returns if table exists or not', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.hasTable('teams')];
                    case 1:
                        _a.apply(void 0, [_c.sent()]).to.equal(true);
                        _b = chai_1.expect;
                        return [4 /*yield*/, inspector.hasTable('foobar')];
                    case 2:
                        _b.apply(void 0, [_c.sent()]).to.equal(false);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.columns', function () {
        it('returns information for all tables', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.columns()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal([
                            { table: 'page_visits', column: 'request_path' },
                            { table: 'page_visits', column: 'user_agent' },
                            { table: 'page_visits', column: 'created_at' },
                            { table: 'teams', column: 'id' },
                            { table: 'teams', column: 'uuid' },
                            { table: 'teams', column: 'name' },
                            { table: 'teams', column: 'description' },
                            { table: 'teams', column: 'credits' },
                            { table: 'teams', column: 'created_at' },
                            { table: 'teams', column: 'activated_at' },
                            { table: 'users', column: 'id' },
                            { table: 'users', column: 'team_id' },
                            { table: 'users', column: 'email' },
                            { table: 'users', column: 'password' },
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns information for specific table', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.columns('teams')];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal([
                            { column: 'id', table: 'teams' },
                            { column: 'uuid', table: 'teams' },
                            { column: 'name', table: 'teams' },
                            { column: 'description', table: 'teams' },
                            { column: 'credits', table: 'teams' },
                            { column: 'created_at', table: 'teams' },
                            { column: 'activated_at', table: 'teams' },
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.columnInfo', function () {
        it('returns information for all columns in all tables', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.columnInfo()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal([
                            {
                                name: 'request_path',
                                table: 'page_visits',
                                type: 'varchar',
                                default_value: null,
                                max_length: 100,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'user_agent',
                                table: 'page_visits',
                                type: 'varchar',
                                default_value: null,
                                max_length: 200,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'created_at',
                                table: 'page_visits',
                                type: 'datetime',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'id',
                                table: 'teams',
                                type: 'integer',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: false,
                                is_unique: false,
                                is_primary_key: true,
                                has_auto_increment: true,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'uuid',
                                table: 'teams',
                                type: 'varchar',
                                default_value: null,
                                max_length: 36,
                                precision: null,
                                scale: null,
                                is_nullable: false,
                                is_unique: true,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'name',
                                table: 'teams',
                                type: 'varchar',
                                default_value: null,
                                max_length: 100,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'description',
                                table: 'teams',
                                type: 'text',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'credits',
                                table: 'teams',
                                type: 'integer',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'created_at',
                                table: 'teams',
                                type: 'datetime',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'activated_at',
                                table: 'teams',
                                type: 'date',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'id',
                                table: 'users',
                                type: 'integer',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: false,
                                is_unique: false,
                                is_primary_key: true,
                                has_auto_increment: true,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'team_id',
                                table: 'users',
                                type: 'integer',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: false,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: 'id',
                                foreign_key_table: 'teams',
                            },
                            {
                                name: 'email',
                                table: 'users',
                                type: 'varchar',
                                default_value: null,
                                max_length: 100,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'password',
                                table: 'users',
                                type: 'varchar',
                                default_value: null,
                                max_length: 60,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns information for all columns in specific table', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.columnInfo('teams')];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal([
                            {
                                name: 'id',
                                table: 'teams',
                                type: 'integer',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: false,
                                is_unique: false,
                                is_primary_key: true,
                                has_auto_increment: true,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'uuid',
                                table: 'teams',
                                type: 'varchar',
                                default_value: null,
                                max_length: 36,
                                precision: null,
                                scale: null,
                                is_nullable: false,
                                is_unique: true,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'name',
                                table: 'teams',
                                type: 'varchar',
                                default_value: null,
                                max_length: 100,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'description',
                                table: 'teams',
                                type: 'text',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'credits',
                                table: 'teams',
                                type: 'integer',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'created_at',
                                table: 'teams',
                                type: 'datetime',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                            {
                                name: 'activated_at',
                                table: 'teams',
                                type: 'date',
                                default_value: null,
                                max_length: null,
                                precision: null,
                                scale: null,
                                is_nullable: true,
                                is_unique: false,
                                is_primary_key: false,
                                has_auto_increment: false,
                                foreign_key_column: null,
                                foreign_key_table: null,
                            },
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('returns information for a specific column in a specific table', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.columnInfo('teams', 'uuid')];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.deep.equal({
                            name: 'uuid',
                            table: 'teams',
                            type: 'varchar',
                            default_value: null,
                            max_length: 36,
                            precision: null,
                            scale: null,
                            is_nullable: false,
                            is_unique: true,
                            is_primary_key: false,
                            has_auto_increment: false,
                            foreign_key_column: null,
                            foreign_key_table: null,
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.primary', function () {
        it('returns primary key for a table', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, inspector.primary('teams')];
                    case 1:
                        _a.apply(void 0, [_c.sent()]).to.equal('id');
                        _b = chai_1.expect;
                        return [4 /*yield*/, inspector.primary('page_visits')];
                    case 2:
                        _b.apply(void 0, [_c.sent()]).to.equal(null);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
