"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rawColumnToColumn = void 0;
var strip_quotes_1 = require("../utils/strip-quotes");
function rawColumnToColumn(rawColumn) {
    var is_generated = rawColumn.VIRTUAL_COLUMN === 'YES';
    var default_value = strip_quotes_1.stripQuotes(rawColumn.DATA_DEFAULT);
    return {
        name: rawColumn.COLUMN_NAME,
        table: rawColumn.TABLE_NAME,
        data_type: rawColumn.DATA_TYPE,
        default_value: !is_generated ? default_value : null,
        generation_expression: is_generated ? default_value : null,
        max_length: rawColumn.DATA_LENGTH,
        numeric_precision: rawColumn.DATA_PRECISION,
        numeric_scale: rawColumn.DATA_SCALE,
        is_generated: rawColumn.VIRTUAL_COLUMN === 'YES',
        is_nullable: rawColumn.NULLABLE === 'Y',
        is_unique: rawColumn.CONSTRAINT_TYPE === 'U',
        is_primary_key: rawColumn.CONSTRAINT_TYPE === 'P',
        has_auto_increment: rawColumn.IDENTITY_COLUMN === 'YES',
        foreign_key_column: rawColumn.REFERENCED_COLUMN_NAME,
        foreign_key_table: rawColumn.REFERENCED_TABLE_NAME,
        comment: rawColumn.COLUMN_COMMENT,
    };
}
exports.rawColumnToColumn = rawColumnToColumn;
var oracleDB = /** @class */ (function () {
    function oracleDB(knex) {
        this.knex = knex;
    }
    // Tables
    // ===============================================================================================
    /**
     * List all existing tables in the current schema/database
     */
    oracleDB.prototype.tables = function () {
        return __awaiter(this, void 0, void 0, function () {
            var records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('TABLE_NAME as name')
                            .from('USER_TABLES')];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var name = _a.name;
                                return name;
                            })];
                }
            });
        });
    };
    oracleDB.prototype.tableInfo = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('TABLE_NAME as name')
                            .from('USER_TABLES');
                        if (!table) return [3 /*break*/, 2];
                        return [4 /*yield*/, query.andWhere({ TABLE_NAME: table }).first()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, query];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    oracleDB.prototype.hasTable = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .count({ count: '*' })
                            .from('USER_TABLES')
                            .where({ TABLE_NAME: table })
                            .first()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, !!(result === null || result === void 0 ? void 0 : result.count)];
                }
            });
        });
    };
    // Columns
    // ===============================================================================================
    /**
     * Get all the available columns in the current schema/database. Can be filtered to a specific table
     */
    oracleDB.prototype.columns = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('TABLE_NAME as table', 'COLUMN_NAME as column')
                            .from('USER_TAB_COLS')
                            .where({ HIDDEN_COLUMN: 'NO' });
                        if (table) {
                            query.andWhere({ TABLE_NAME: table });
                        }
                        return [4 /*yield*/, query];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    oracleDB.prototype.columnInfo = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var query, rawColumn, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .with('uc', this.knex.raw("\n          SELECT /*+ materialize */\n            \"uc\".\"TABLE_NAME\",\n            \"ucc\".\"COLUMN_NAME\",\n            \"uc\".\"CONSTRAINT_NAME\",\n            \"uc\".\"CONSTRAINT_TYPE\",\n            \"uc\".\"R_CONSTRAINT_NAME\",\n            COUNT(*) OVER(\n              PARTITION BY \"uc\".\"CONSTRAINT_NAME\"\n            ) \"CONSTRAINT_COUNT\",\n            ROW_NUMBER() OVER(\n              PARTITION BY \"uc\".\"TABLE_NAME\", \"ucc\".\"COLUMN_NAME\" ORDER BY \"uc\".\"CONSTRAINT_TYPE\"\n            ) \"CONSTRAINT_PRIORITY\"\n          FROM \"USER_CONSTRAINTS\" \"uc\"\n          INNER JOIN \"USER_CONS_COLUMNS\" \"ucc\"\n            ON \"uc\".\"CONSTRAINT_NAME\" = \"ucc\".\"CONSTRAINT_NAME\"\n            AND \"uc\".\"CONSTRAINT_TYPE\" IN ('P', 'U', 'R')\n        "))
                            .select('c.TABLE_NAME', 'c.COLUMN_NAME', 'c.DATA_DEFAULT', 'c.DATA_TYPE', 'c.DATA_LENGTH', 'c.DATA_PRECISION', 'c.DATA_SCALE', 'c.NULLABLE', 'c.IDENTITY_COLUMN', 'c.VIRTUAL_COLUMN', 'cm.COMMENTS as COLUMN_COMMENT', 'ct.CONSTRAINT_TYPE', 'fk.TABLE_NAME as REFERENCED_TABLE_NAME', 'fk.COLUMN_NAME as REFERENCED_COLUMN_NAME')
                            .from('USER_TAB_COLS as c')
                            .leftJoin('USER_COL_COMMENTS as cm', {
                            'c.TABLE_NAME': 'cm.TABLE_NAME',
                            'c.COLUMN_NAME': 'cm.COLUMN_NAME',
                        })
                            .leftJoin('uc as ct', {
                            'c.TABLE_NAME': 'ct.TABLE_NAME',
                            'c.COLUMN_NAME': 'ct.COLUMN_NAME',
                            'ct.CONSTRAINT_COUNT': 1,
                            'ct.CONSTRAINT_PRIORITY': 1,
                        })
                            .leftJoin('uc as fk', 'ct.R_CONSTRAINT_NAME', 'fk.CONSTRAINT_NAME')
                            .where({ 'c.HIDDEN_COLUMN': 'NO' });
                        if (table) {
                            query.andWhere({ 'c.TABLE_NAME': table });
                        }
                        if (!column) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({
                                'c.COLUMN_NAME': column,
                            })
                                // NOTE: .first() is signifigantly slower on this query
                                .andWhereRaw('rownum = 1')];
                    case 1:
                        rawColumn = (_a.sent())[0];
                        return [2 /*return*/, rawColumnToColumn(rawColumn)];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(rawColumnToColumn)];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    oracleDB.prototype.hasColumn = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .count({ count: '*' })
                            .from('USER_TAB_COLS')
                            .where({
                            TABLE_NAME: table,
                            COLUMN_NAME: column,
                            HIDDEN_COLUMN: 'NO',
                        })
                            .first()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, !!(result === null || result === void 0 ? void 0 : result.count)];
                }
            });
        });
    };
    /**
     * Get the primary key column for the given table
     */
    oracleDB.prototype.primary = function (table) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('cc.COLUMN_NAME')
                            .from('USER_CONSTRAINTS as uc')
                            .join('USER_CONS_COLUMNS as cc', 'uc.CONSTRAINT_NAME', 'cc.CONSTRAINT_NAME')
                            .where({
                            'uc.TABLE_NAME': table,
                            'uc.CONSTRAINT_TYPE': 'P',
                        })
                            .first()];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, (_a = result === null || result === void 0 ? void 0 : result.COLUMN_NAME) !== null && _a !== void 0 ? _a : null];
                }
            });
        });
    };
    // Foreign Keys
    // ===============================================================================================
    oracleDB.prototype.foreignKeys = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .with('ucc', this.knex.raw('SELECT /*+ materialize */ "TABLE_NAME", "COLUMN_NAME", "CONSTRAINT_NAME" FROM "USER_CONS_COLUMNS"'))
                            .select('uc.TABLE_NAME as table', 'cc.COLUMN_NAME as column', 'rcc.TABLE_NAME as foreign_key_table', 'rcc.COLUMN_NAME as foreign_key_column', 'uc.CONSTRAINT_NAME as constraint_name', this.knex.raw('NULL as "on_update"'), 'uc.DELETE_RULE as on_delete')
                            .from('USER_CONSTRAINTS as uc')
                            .leftJoin('ucc as cc', 'uc.CONSTRAINT_NAME', 'cc.CONSTRAINT_NAME')
                            .leftJoin('ucc as rcc', 'uc.R_CONSTRAINT_NAME', 'rcc.CONSTRAINT_NAME')
                            .where({ 'uc.CONSTRAINT_TYPE': 'R' });
                        if (table) {
                            query.andWhere({ 'uc.TABLE_NAME': table });
                        }
                        return [4 /*yield*/, query];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return oracleDB;
}());
exports.default = oracleDB;
