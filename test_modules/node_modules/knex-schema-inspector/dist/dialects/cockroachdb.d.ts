import { Knex } from 'knex';
import { SchemaInspector } from '../types/schema-inspector';
import { Table } from '../types/table';
import { Column } from '../types/column';
import { ForeignKey } from '../types/foreign-key';
declare type RawColumn = {
    column_name: string;
    table_name: string;
    table_schema: string;
    data_type: string;
    column_default: any | null;
    character_maximum_length: null | number | string;
    is_generated: 'NEVER' | 'ALWAYS';
    is_nullable: 'YES' | 'NO';
    is_unique: boolean;
    is_primary: boolean;
    is_identity: 'YES' | 'NO';
    generation_expression: null | string;
    numeric_precision: null | number | string;
    numeric_scale: null | number | string;
    serial: null | string;
    column_comment: string | null;
    foreign_key_schema: null | string;
    foreign_key_table: null | string;
    foreign_key_column: null | string;
};
export declare function rawColumnToColumn(rawColumn: RawColumn): Column;
/**
 * Converts CockroachDB default value to JS
 * Eg `'example'::character varying` => `example`
 */
export declare function parseDefaultValue(type: string | null): any;
export default class CockroachDB implements SchemaInspector {
    knex: Knex;
    schema: string;
    explodedSchema: string[];
    constructor(knex: Knex);
    /**
     * Set the schema to be used in other methods
     */
    withSchema(schema: string): this;
    /**
     * List all existing tables in the current schema/database
     */
    tables(): Promise<string[]>;
    /**
     * Get the table info for a given table. If table parameter is undefined, it will return all tables
     * in the current schema/database
     */
    tableInfo(): Promise<Table[]>;
    tableInfo(table: string): Promise<Table>;
    /**
     * Check if a table exists in the current schema/database
     */
    hasTable(table: string): Promise<boolean>;
    /**
     * Get all the available columns in the current schema/database. Can be filtered to a specific table
     */
    columns(table?: string): Promise<{
        table: string;
        column: string;
    }[]>;
    /**
     * Get the column info for all columns, columns in a given table, or a specific column.
     */
    columnInfo(): Promise<Column[]>;
    columnInfo(table: string): Promise<Column[]>;
    columnInfo(table: string, column: string): Promise<Column>;
    /**
     * Check if the given table contains the given column
     */
    hasColumn(table: string, column: string): Promise<boolean>;
    /**
     * Get the primary key column for the given table
     */
    primary(table: string): Promise<string>;
    foreignKeys(table?: string): Promise<ForeignKey[]>;
}
export {};
