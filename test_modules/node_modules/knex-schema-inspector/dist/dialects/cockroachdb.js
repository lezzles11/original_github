"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDefaultValue = exports.rawColumnToColumn = void 0;
var strip_quotes_1 = require("../utils/strip-quotes");
var lodash_isnil_1 = __importDefault(require("lodash.isnil"));
function convertStringOrNumber(t) {
    return t == undefined ? t : Number(t);
}
function rawColumnToColumn(rawColumn) {
    return {
        name: rawColumn.column_name,
        table: rawColumn.table_name,
        data_type: rawColumn.data_type,
        default_value: parseDefaultValue(rawColumn.column_default),
        generation_expression: rawColumn.generation_expression || null,
        max_length: convertStringOrNumber(rawColumn.character_maximum_length),
        numeric_precision: convertStringOrNumber(rawColumn.numeric_precision),
        numeric_scale: convertStringOrNumber(rawColumn.numeric_scale),
        is_generated: rawColumn.is_generated === 'ALWAYS',
        is_nullable: rawColumn.is_nullable === 'YES',
        is_unique: rawColumn.is_unique,
        is_primary_key: rawColumn.is_primary,
        has_auto_increment: rawColumn.serial !== null || rawColumn.is_identity === 'YES',
        comment: rawColumn.column_comment,
        schema: rawColumn.table_schema,
        foreign_key_schema: rawColumn.foreign_key_schema,
        foreign_key_table: rawColumn.foreign_key_table,
        foreign_key_column: rawColumn.foreign_key_column,
    };
}
exports.rawColumnToColumn = rawColumnToColumn;
/**
 * Converts CockroachDB default value to JS
 * Eg `'example'::character varying` => `example`
 */
function parseDefaultValue(type) {
    if (lodash_isnil_1.default(type))
        return null;
    if (type.startsWith('nextval('))
        return type;
    var _a = type.split('::'), value = _a[0], cast = _a[1];
    value = value.replace(/^\'([\s\S]*)\'$/, '$1');
    if (/.*json.*/.test(cast))
        return JSON.parse(value);
    if (/.*(char|text).*/.test(cast))
        return String(value);
    return isNaN(value) ? value : Number(value);
}
exports.parseDefaultValue = parseDefaultValue;
var CockroachDB = /** @class */ (function () {
    function CockroachDB(knex) {
        this.knex = knex;
        var config = knex.client.config;
        if (!config.searchPath) {
            this.schema = 'public';
            this.explodedSchema = [this.schema];
        }
        else if (typeof config.searchPath === 'string') {
            this.schema = config.searchPath;
            this.explodedSchema = [config.searchPath];
        }
        else {
            this.schema = config.searchPath[0];
            this.explodedSchema = config.searchPath;
        }
    }
    // CockroachDB specific
    // ===============================================================================================
    /**
     * Set the schema to be used in other methods
     */
    CockroachDB.prototype.withSchema = function (schema) {
        this.schema = schema;
        this.explodedSchema = [this.schema];
        return this;
    };
    // Tables
    // ===============================================================================================
    /**
     * List all existing tables in the current schema/database
     */
    CockroachDB.prototype.tables = function () {
        return __awaiter(this, void 0, void 0, function () {
            var records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('tablename')
                            .from('pg_catalog.pg_tables')
                            .whereIn('schemaname', this.explodedSchema)];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var tablename = _a.tablename;
                                return tablename;
                            })];
                }
            });
        });
    };
    CockroachDB.prototype.tableInfo = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, rawTable, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('table_name', 'table_schema', this.knex
                            .select(this.knex.raw('obj_description(oid)'))
                            .from('pg_class')
                            .where({ relkind: 'r' })
                            .andWhere({ relname: 'table_name' })
                            .as('table_comment'))
                            .from('information_schema.tables')
                            .whereIn('table_schema', this.explodedSchema)
                            .andWhereRaw("\"table_catalog\" = current_database()")
                            .andWhere({ table_type: 'BASE TABLE' })
                            .orderBy('table_name', 'asc');
                        if (!table) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ table_name: table })
                                .limit(1)
                                .first()];
                    case 1:
                        rawTable = _a.sent();
                        return [2 /*return*/, {
                                name: rawTable.table_name,
                                schema: rawTable.table_schema,
                                comment: rawTable.table_comment,
                            }];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (rawTable) {
                                return {
                                    name: rawTable.table_name,
                                    schema: rawTable.table_schema,
                                    comment: rawTable.table_comment,
                                };
                            })];
                }
            });
        });
    };
    /**
     * Check if a table exists in the current schema/database
     */
    CockroachDB.prototype.hasTable = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var subquery, record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subquery = this.knex
                            .select()
                            .from('information_schema.tables')
                            .whereIn('table_schema', this.explodedSchema)
                            .andWhere({ table_name: table });
                        return [4 /*yield*/, this.knex
                                .select(this.knex.raw('exists (?)', [subquery]))
                                .first()];
                    case 1:
                        record = _a.sent();
                        return [2 /*return*/, (record === null || record === void 0 ? void 0 : record.exists) || false];
                }
            });
        });
    };
    // Columns
    // ===============================================================================================
    /**
     * Get all the available columns in the current schema/database. Can be filtered to a specific table
     */
    CockroachDB.prototype.columns = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var query, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.knex
                            .select('table_name', 'column_name')
                            .from('information_schema.columns')
                            .whereIn('table_schema', this.explodedSchema);
                        if (table) {
                            query.andWhere({ table_name: table });
                        }
                        return [4 /*yield*/, query];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, records.map(function (_a) {
                                var table_name = _a.table_name, column_name = _a.column_name;
                                return ({
                                    table: table_name,
                                    column: column_name,
                                });
                            })];
                }
            });
        });
    };
    CockroachDB.prototype.columnInfo = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var knex, query, rawColumn, records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        knex = this.knex;
                        query = knex
                            .select('c.column_name', 'c.table_name', 'c.data_type', 'c.column_default', 'c.character_maximum_length', 'c.is_generated', 'c.is_nullable', 'c.numeric_precision', 'c.numeric_scale', 'c.table_schema', 'c.is_identity', 'c.generation_expression', knex.raw('pg_get_serial_sequence(quote_ident(c.table_name), c.column_name) as serial'), knex.raw('pg_catalog.col_description(pg_class.oid, c.ordinal_position:: int) as column_comment'), knex.raw("COALESCE(pg.indisunique, false) as is_unique"), knex.raw("COALESCE(pg.indisprimary, false) as is_primary"), 'ffk.foreign_key_schema', 'ffk.foreign_key_table', 'ffk.foreign_key_column')
                            .from(knex.raw('information_schema.columns c'))
                            .joinRaw("\n        LEFT JOIN pg_catalog.pg_class\n          ON pg_catalog.pg_class.oid = CONCAT_WS('.', quote_ident(c.table_schema), quote_ident(c.table_name)):: regclass:: oid\n          AND pg_catalog.pg_class.relname = c.table_name\n      ")
                            .joinRaw("\n        LEFT JOIN LATERAL (\n          SELECT\n            pg_index.indisprimary,\n            pg_index.indisunique\n          FROM pg_index\n          JOIN pg_attribute\n            ON pg_attribute.attrelid = pg_index.indrelid\n            AND pg_attribute.attnum = any(pg_index.indkey)\n          WHERE pg_index.indrelid = quote_ident(c.table_name)::regclass\n          AND pg_attribute.attname = c.column_name\n          AND pg_index.indnatts = 1\n          LIMIT 1\n        ) pg ON true\n      ")
                            .joinRaw("\n        LEFT JOIN LATERAL (\n          SELECT\n            k2.table_schema AS foreign_key_schema,\n            k2.table_name AS foreign_key_table,\n            k2.column_name AS foreign_key_column\n          FROM\n            information_schema.key_column_usage k1\n            JOIN information_schema.referential_constraints fk using (\n              constraint_schema, constraint_name\n            )\n            JOIN information_schema.key_column_usage k2\n              ON k2.constraint_schema = fk.unique_constraint_schema\n              AND k2.constraint_name = fk.unique_constraint_name\n              AND k2.ordinal_position = k1.position_in_unique_constraint\n            WHERE k1.table_name = c.table_name\n            AND k1.column_name = c.column_name\n        ) ffk ON TRUE\n      ")
                            .whereIn('c.table_schema', this.explodedSchema)
                            .andWhere('pg_class.relkind', '!=', 'S')
                            .orderBy(['c.table_name', 'c.ordinal_position']);
                        if (table) {
                            query.andWhere({ 'c.table_name': table });
                        }
                        if (!column) return [3 /*break*/, 2];
                        return [4 /*yield*/, query
                                .andWhere({ 'c.column_name': column })
                                .first()];
                    case 1:
                        rawColumn = _a.sent();
                        return [2 /*return*/, rawColumnToColumn(rawColumn)];
                    case 2: return [4 /*yield*/, query];
                    case 3:
                        records = _a.sent();
                        return [2 /*return*/, records.map(rawColumnToColumn)];
                }
            });
        });
    };
    /**
     * Check if the given table contains the given column
     */
    CockroachDB.prototype.hasColumn = function (table, column) {
        return __awaiter(this, void 0, void 0, function () {
            var subquery, record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        subquery = this.knex
                            .select()
                            .from('information_schema.columns')
                            .whereIn('table_schema', this.explodedSchema)
                            .andWhere({
                            table_name: table,
                            column_name: column,
                        });
                        return [4 /*yield*/, this.knex
                                .select(this.knex.raw('exists (?)', [subquery]))
                                .first()];
                    case 1:
                        record = _a.sent();
                        return [2 /*return*/, (record === null || record === void 0 ? void 0 : record.exists) || false];
                }
            });
        });
    };
    /**
     * Get the primary key column for the given table
     */
    CockroachDB.prototype.primary = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex
                            .select('information_schema.key_column_usage.column_name')
                            .from('information_schema.key_column_usage')
                            .leftJoin('information_schema.table_constraints', 'information_schema.table_constraints.constraint_name', 'information_schema.key_column_usage.constraint_name')
                            .whereIn('information_schema.table_constraints.table_schema', this.explodedSchema)
                            .andWhere({
                            'information_schema.table_constraints.constraint_type': 'PRIMARY KEY',
                            'information_schema.table_constraints.table_name': table,
                        })
                            .first()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result ? result.column_name : null];
                }
            });
        });
    };
    // Foreign Keys
    // ===============================================================================================
    CockroachDB.prototype.foreignKeys = function (table) {
        return __awaiter(this, void 0, void 0, function () {
            function stripRowQuotes(row) {
                return Object.fromEntries(Object.entries(row).map(function (_a) {
                    var key = _a[0], value = _a[1];
                    return [key, strip_quotes_1.stripQuotes(value)];
                }));
            }
            var result, rowsWithoutQuotes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex.raw("\n      SELECT\n        c.conrelid::regclass::text AS \"table\",\n        (\n          SELECT\n            STRING_AGG(a.attname, ','\n            ORDER BY\n              t.seq)\n          FROM (\n            SELECT\n              ROW_NUMBER() OVER (ROWS UNBOUNDED PRECEDING) AS seq,\n              attnum\n            FROM\n              UNNEST(c.conkey) AS t (attnum)) AS t\n          INNER JOIN pg_attribute AS a ON a.attrelid = c.conrelid\n            AND a.attnum = t.attnum) AS \"column\",\n        tt.name AS foreign_key_table,\n        (\n          SELECT\n            STRING_AGG(QUOTE_IDENT(a.attname), ','\n            ORDER BY\n              t.seq)\n          FROM (\n            SELECT\n              ROW_NUMBER() OVER (ROWS UNBOUNDED PRECEDING) AS seq,\n              attnum\n            FROM\n              UNNEST(c.confkey) AS t (attnum)) AS t\n        INNER JOIN pg_attribute AS a ON a.attrelid = c.confrelid\n          AND a.attnum = t.attnum) AS foreign_key_column,\n        tt.schema AS foreign_key_schema,\n        c.conname AS constraint_name,\n        CASE confupdtype\n        WHEN 'r' THEN\n          'RESTRICT'\n        WHEN 'c' THEN\n          'CASCADE'\n        WHEN 'n' THEN\n          'SET NULL'\n        WHEN 'd' THEN\n          'SET DEFAULT'\n        WHEN 'a' THEN\n          'NO ACTION'\n        ELSE\n          NULL\n        END AS on_update,\n        CASE confdeltype\n        WHEN 'r' THEN\n          'RESTRICT'\n        WHEN 'c' THEN\n          'CASCADE'\n        WHEN 'n' THEN\n          'SET NULL'\n        WHEN 'd' THEN\n          'SET DEFAULT'\n        WHEN 'a' THEN\n          'NO ACTION'\n        ELSE\n          NULL\n        END AS\n        on_delete\n      FROM\n        pg_catalog.pg_constraint AS c\n        INNER JOIN (\n          SELECT\n            pg_class.oid,\n            QUOTE_IDENT(pg_namespace.nspname) AS SCHEMA,\n            QUOTE_IDENT(pg_class.relname) AS name\n          FROM\n            pg_class\n            INNER JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid) AS tf ON tf.oid = c.conrelid\n        INNER JOIN (\n          SELECT\n            pg_class.oid,\n            QUOTE_IDENT(pg_namespace.nspname) AS SCHEMA,\n            QUOTE_IDENT(pg_class.relname) AS name\n          FROM\n            pg_class\n            INNER JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid) AS tt ON tt.oid = c.confrelid\n      WHERE\n        c.contype = 'f';\n    ")];
                    case 1:
                        result = _a.sent();
                        rowsWithoutQuotes = result.rows.map(stripRowQuotes);
                        if (table) {
                            return [2 /*return*/, rowsWithoutQuotes.filter(function (row) { return row.table === table; })];
                        }
                        return [2 /*return*/, rowsWithoutQuotes];
                }
            });
        });
    };
    return CockroachDB;
}());
exports.default = CockroachDB;
