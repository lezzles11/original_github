const fs = require("fs")
const jsdoc2md = require('jsdoc-to-markdown')
const ccc = require("clear_concise_creative")
const automate_me = require("automate_me")
const { see } = require("code_clarity")

function replaceJSDOCLink(moduleName) {
    ccc.addToNestedJSON("./node_modules/explain_me/jsdoc.json", ["opts", "theme_opts", "menu"], {
        "title": "see npm package",
        "link": `https://www.npmjs.com/package/${moduleName}`,
        "target": "_blank"
    })
    ccc.replaceJSON("./node_modules/explain_me/jsdoc.json", ["opts", "theme_opts", "codepen"], {
        "enable_for": [
            "examples"
        ],
        "options": {
            "js_external": `https://cdn.jsdelivr.net/npm/${moduleName}/dist/index.js`,
        }
    })
}

function replaceJSDOCVideo(video) {
    ccc.addToNestedJSON("./node_modules/explain_me/jsdoc.json", ["opts", "theme_opts", "menu"], {
        "title": "visual instructions",
        "link": video,
        "target": "_blank"
    })
}

function addInstructions(moduleName) {
    let readme = ccc.readFile("./README.md")
    let instructions = "## If install on html...: \n```" + `<script src="https://cdn.jsdelivr.net/npm/${moduleName}/dist/index.js"></script>` + " ``` \n ``` " + `\nconst output` + " =  " + `${moduleName}.method(parameter)` + "```\n"
    let final = instructions + readme
    ccc.writeFile("./README.md", final)
    return final
}

function readme(moduleName = undefined, video = undefined) {
    let badges = ""
    let getData = jsdoc2md.renderSync({ files: "src/**.js" })
    if (moduleName) {
        badges += `# ${moduleName}`
        badges += "\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)" + `\n![NPM Downloads](https://img.shields.io/npm/dw/${moduleName})`
        badges += "## Instructions: \n```" + `npm install ${moduleName}` + " ``` \n ``` " + `const ${moduleName}` + " =  " + `require('${moduleName}')` + "```\n"
        badges += "\n## If utilizing in html...: \n```" + `<script src="https://cdn.jsdelivr.net/npm/${moduleName}/dist/index.js"></script>` + " ``` \n ``` " + `const output` + " =  " + `${moduleName}.method(parameter)` + "```\n"


    }
    if (video) {
        badges += `[![here](${video})](${video})`
    }
    let data = badges + "\n" + getData;
    ccc.writeFile("./README.md", data)
}



function html(moduleName = undefined, video = undefined) {

    if (moduleName) {
        replaceJSDOCLink(moduleName)
    }
    if (video) {
        replaceJSDOCVideo(video)
    }
    let getJSDOC = ccc.readJSON("./node_modules/explain_me/jsdoc.json")
    ccc.writeJSON("./jsdoc.json", getJSDOC)
    automate_me.runCommand(`rm -rf docs && ./node_modules/.bin/jsdoc --configure ./jsdoc.json -d docs --verbose`)
}

function addScript(moduleName = undefined) {
    if (moduleName) {
        ccc.appendToJSON("./package.json", "homepage", `https://zen-out.github.io/packages/${moduleName}`)
        ccc.appendToJSON("./package.json", "repository", `https://github.com/zen-out/${moduleName}`)
    }
    ccc.mergeJSONObject("./package.json", ["scripts"], {
        "docs": "rm -rf docs && ./node_modules/.bin/jsdoc --configure ./jsdoc.json -d docs --verbose",
        "play": "node playground.js",
        "test": "node __tests__/index.js",
        "deploy": "npm run test && git add . && git commit -m 'updated' && git push && npm version patch && npm publish",
    })
    ccc.mergeJSONObject("./package.json", ["devDependencies"], {
        "gulp": "latest",
        "gulp-mocha": "latest",
        "explain_me": "latest",
        "code_clarity": "latest",
        "node_basetest": "latest",
    })
    ccc.mergeJSONObject("./package.json", ["dependencies"], {
        "whats_wrong": "latest",
    })

}

function makeGlobal() {

    ccc.mergeJSONObject("./package.json", ["scripts"], {
        "compile": "rimraf dist && babel src -d dist",
        "build": "rimraf dist/ && webpack",
    })
    ccc.mergeJSONObject("./package.json", ["devDependencies"], {
        "rimraf": "latest",
        "webpack": "latest",
        "webpack-cli": "latest",
        "copy-webpack-plugin": "latest",
        "@babel/polyfill": "latest",
        "@babel/preset-env": "latest",
        "@babel/cli": "latest",
        "@babel/plugin-proposal-class-properties": "latest",
        "@babel/core": "latest",
        "@babel/node": "latest",
        "babel-loader": "latest",
        "explain_me": "latest"
    })
    ccc.mergeJSONObject("./package.json", ["exports"], {
        ".": "./dist/index.js"
    })
    let getBabel = ccc.readJSON("./node_modules/explain_me/.babelrc")
    ccc.writeJSON("./.babelrc", getBabel)
    let getWebpack = ccc.readFile("./node_modules/explain_me/webpack.config.js")
    ccc.writeFile("./webpack.config.js", getWebpack)
    see.should("also be sure to rename the library")
}

function copyHTML(moduleName, fileName = "global") {
    let copyDocs = ccc.readFile(`./docs/${fileName}.html`)
    ccc.writeFile(`../../joy/zen-out.github.io/packages/${moduleName}.html`, copyDocs)
}

module.exports = { html, readme, addScript, makeGlobal, copyHTML, addInstructions }