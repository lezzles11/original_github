// const axios = require("axios")
// const routes = require("heres_your_route")
// routes.list()
class RequestResponse {
    constructor() {}
    list() {

        let string = `
      requires axios 
      req_res.getURL()
      req_res.getId() // returns user.id or false
      req_res.signup_login_response(response, route) // sets user 
      req_res.logout_response(route) // removes user
      req_res.handleResponse(response, callback) // executes data into callback
      await req_res.getAll(type, callback = undefined)
      await req_res.getOne(type, typeId, callback = undefined)
      await req_res.post(type, object, callback = undefined)
      await req_res.delete(type, typeId, callback = undefined) // returns id 
      await req_res.update(type, typeId, object, callback = undefined) // returns object
      await req_res.updateKeyValue(type, typeId, key, value, callback)
      await req_res.sort(type, sort, callback = undefined)
      await req_res.search(type, query, callback = undefined)
      await req_res.test()

      `
        console.log(string)
        return string;

    }
    parseIds(object) {
        for (const [key, value] of Object.entries(object)) {
            if (key.includes("id")) {
                object[key] = parseInt(value)
            }
        }
        return object;
    }

    getURL() {
        return 'http://localhost:3000'
    }
    getId() {
        // let localStorage = window.localStorage.getItem("user")
        // let user = JSON.parse(localStorage)
        // if (user.id) {
        //     return parseInt(user.id)
        // } else {
        //     return false;
        // }
        return 4;
    }
    signup_login_response(response, route) {
        let user = JSON.stringify(response)
        window.localStorage.setItem("user", user)
        setTimeout(() => {
            window.location.replace(route)
        }, 1000)
    }
    logout_response(route) {
        window.localStorage.removeItem("user")
        setTimeout(() => {
            window.location.replace(route)
        }, 1000)
    }

    handleResponse(response, callback) {
        if (response.error) {
            iziToast.error({
                title: response.data.error,
                message: `${response.data.location} && ${response.data.expected}`,
            });
        } else {
            if (callback !== undefined) {
                callback(response.data)
                return response.data;
            } else {
                return response.data;
            }
        }
    }
    async getAll(type, callback = undefined) {
        let user_id = this.getId()
        let url = this.getURL()
        let route = `${url}/api/user/${user_id}/${type}`
        let response = await axios.get(route)
        return this.handleResponse(response, callback)
    }
    async getOne(type, typeId, callback = undefined) {
        let user_id = this.getId()
        let url = this.getURL()
        let route = `${url}/api/user/${user_id}/${type}/${typeId}`
        let response = await axios.get(route)
        return this.handleResponse(response, callback)
    }
    async post(type, object, callback = undefined) {
        if (type === "task") {
            let keys = Object.keys(object)
            if (!keys.includes("name")) {
                iziToast.error({
                    title: "Can't post task without a string",
                    message: "Please add a task"
                });
            }
        }
        let user_id = this.getId()
        let url = this.getURL()
        let route = `${url}/api/user/${user_id}/${type}`
        object["user_id"] = user_id
        object = this.parseIds(object)
        let response = await axios.post(route, object)
        return this.handleResponse(response, callback)
    }

    async delete(type, typeId, callback = undefined) {
        let user_id = this.getId()
        let url = this.getURL()
        typeId = parseInt(typeId)
        let route = `${url}/api/user/${user_id}/${type}/${typeId}`
        let response = await axios.delete(route)
        if (response.error) {
            iziToast.error({
                title: response.data.error,
                message: `${response.data.location} && ${response.data.expected}`,
            });
        } else {
            if (callback !== undefined) {
                callback(typeId)
                return typeId;
            } else {
                return typeId
            }
        }

    }
    async update(type, typeId, object, callback = undefined) {
        let type_id = `${type}_id`
        let user_id = this.getId()
        let url = this.getURL()
        object["user_id"] = user_id
        object[type_id] = parseInt(typeId);
        object = this.parseIds(object)
        let route = `${url}/api/user/${user_id}/${type}`
        let response = await axios.put(route, object)
        return this.handleResponse(response, callback)
    }

    async updateKeyValue(type, typeId, key, value, callback = undefined) {
        let type_id = `${type}_id`
        let user_id = this.getId()
        let url = this.getURL()
        typeId = parseInt(typeId)
        let obj = {}
        obj[key] = value;
        obj[type_id] = typeId;
        obj["user_id"] = user_id
        obj = this.parseIds(obj)
        let route = `${url}/api/user/${user_id}/${type}`
        let response = await axios.put(route, obj)
        return this.handleResponse(response, callback)
    }

    async sort(type, sort, callback = undefined) {
        let user_id = this.getId()
        let url = this.getURL()
        let route = `${url}/api/user/${user_id}/${sort}/${type}`
        let response = await axios.get(route)
        return this.handleResponse(response, callback)
    }

    async search(type, query, callback = undefined) {
        let user_id = this.getId()
        let url = this.getURL()
        let route = `${url}/api/user/${user_id}/search/${type}/${query}`
        let response = await axios.get(route)
        return this.handleResponse(response, callback)
    }

    async test() {
        let get_all = await this.getAll("problem")
        console.log("ðŸš€ ~ file: index.js ~ line 165 ~ RequestResponse ~ test ~ get_all", get_all[0])
            // console.log("ðŸš€ ~ file: index.js ~ line 167 ~ RequestResponse ~ test ~ get_one", get_one)


        // let get_search = await this.search("problem", "love")
        // console.log(search)
        // let get_sort = await this.sort("problem", "created")
        // console.log(get_sort[0])
        // console.log(get_sort[get_sort.length - 1])
        // let get_update = await this.updateKeyValue("problem", 146, "whatshouldbe", "hello")

        // let updateObj = await this.update("problem", 1, { whatshouldbe: "motivation" })
        // console.log("ðŸš€ ~ file: index.js ~ line 190 ~ RequestResponse ~ test ~ updateObj", updateObj)

        // let get_post = await this.post("problem", { problem: "fufu", whatshouldbe: "chill", whatactuallyis: "annoying", hypothesis: "smoke", plan: "eek going" })
        // console.log(get_post)

        // let get_delete = await this.delete("problem", 145)
        // console.log("ðŸš€ ~ file: index.js ~ line 179 ~ RequestResponse ~ test ~ get_delete", get_delete)
        // console.log("ðŸš€ ~ file: index.js ~ line 246 ~ testAxios ~ get_update", get_update)

    }

}
let req_res = new RequestResponse()