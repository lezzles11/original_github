swagger: "2.0"
info:
  version: 1.0.0
  title: optee
  description: the best website ever it'll help you with your life
  contact:
    name: Support
    email: lesley.yc@gmail.com
host: localhost:3000
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/sorted/{hourglass_condition}/user/{user_id}/type/{table_name}:
    get:
      description: >-
        condition can be difficulty, importance, status, created, edit, seconds,
        end
      summary: get all
      tags:
        - hourglass
      parameters:
        - $ref: "#/definitions/parameters/hourglass_condition"
        - $ref: "#/definitions/parameters/user_id"
        - $ref: "#/definitions/parameters/table_name"
      responses:
        "200":
          description: array of problems
          schema:
            type: array
            items:
              $ref: "#/definitions/get_problem_task"
        "400":
          $ref: "#/definitions/error"
  /api/sorted/{hourglass_condition}/user/{user_id}/type/{table_name}/{problem_id}:
    get:
      description: >-
        condition can be difficulty, importance, status, created, edit, seconds,
        end
      summary: get all
      tags:
        - hourglass
      parameters:
        - $ref: "#/definitions/parameters/hourglass_condition"
        - $ref: "#/definitions/parameters/user_id"
        - $ref: "#/definitions/parameters/table_name"
        - $ref: "#/definitions/parameters/problem_id"
      responses:
        "200":
          description: array of problems
          schema:
            type: array
            items:
              $ref: "#/definitions/get_problem_task"
        "400":
          $ref: "#/definitions/error"
  /api/user/{user_id}/problem:
    get:
      description: description
      summary: get all
      tags:
        - problem
      parameters:
        - $ref: "#/definitions/parameters/user_id"
      responses:
        "200":
          description: array of problems
          schema:
            type: array
            items:
              $ref: "#/definitions/get_problem"
        "400":
          $ref: "#/definitions/error"
    post:
      description: description
      summary: post one
      produces:
        - application/json
      tags:
        - problem
      parameters:
        - $ref: "#/definitions/parameters/user_id"
        - in: body
          name: user
          description: The user to create.
          schema:
            $ref: "#/definitions/post_problem"
      responses:
        "201":
          $ref: "#/definitions/post_problem"
        default:
          $ref: "#/definitions/post_problem"
  /api/user/{user_id}/problem/{problem_id}:
    delete:
      description: description
      summary: delete one
      tags:
        - problem
      parameters:
        - $ref: "#/definitions/parameters/user_id"
        - $ref: "#/definitions/parameters/problem_id"
      responses:
        "200":
          description: deleted
        "400":
          $ref: "#/definitions/error"
        "418":
          description: keep calm
    put:
      description: description
      summary: summary
      tags:
        - problem
      parameters:
        - $ref: "#/definitions/parameters/user_id"
        - $ref: "#/definitions/parameters/problem_id"
        - in: body
          name: edit one
          description: The problem to create.
          schema:
            $ref: "#/definitions/edit_problem"
      responses:
        "202":
          $ref: "#/definitions/edit_problem"
        "400":
          $ref: "#/definitions/error"
    get:
      description: description
      summary: get one
      tags:
        - problem
      parameters:
        - $ref: "#/definitions/parameters/user_id"
        - $ref: "#/definitions/parameters/problem_id"
      responses:
        "200":
          $ref: "#/definitions/get_problem"
        "400":
          $ref: "#/definitions/error"
  /api/info/name/{table_name}:
    get:
      description: table info
      summary: null
      tags:
        - info
      parameters:
        - $ref: "#/definitions/parameters/table_name"
      responses:
        "202":
          description: A list of table values
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - problem
                  - whatshouldbe
                  - whatactuallyis
                  - hypothesis
                  - plan
        "400":
          $ref: "#/definitions/error"
  /api/info/type/{table_name}:
    get:
      description: table info
      summary: null
      tags:
        - info
      parameters:
        - $ref: "#/definitions/parameters/table_name"
      responses:
        "202":
          description: An object of of table values
          content:
            application/json:
              schema:
                type: object
                example:
                  problem: string
                  whatshouldbe: string
                  whatactuallyis: string
                  hypothesis: string
                  plan: string
        "400":
          $ref: "#/definitions/error"
  /api/user:
    post:
      description: description
      summary: post one
      produces:
        - application/json
      tags:
        - cheatsheet
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            $ref: "#/definitions/post_user"
      responses:
        "201":
          $ref: "#/definitions/get_user"
    get:
      description: get all users
      summary: get all
      tags:
        - user
      responses:
        "200":
          description: array of users
          schema:
            type: array
            items:
              $ref: "#/definitions/get_user"
        "400":
          $ref: "#/definitions/error"
    verify:
      description: description
      summary: post one
      produces:
        - application/json
      tags:
        - user
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            $ref: "#/definitions/verify_user"
      responses:
        "201":
          $ref: "#/definitions/get_user"
  /api/user/${user_id}:
    delete:
      description: description
      summary: delete one
      tags:
        - user
      parameters:
        - $ref: "#/definitions/parameters/user_id"
      responses:
        "200":
          description: deleted
        "400":
          $ref: "#/definitions/error"
        "418":
          description: keep calm
    put:
      description: description
      summary: summary
      tags:
        - user
      parameters:
        - $ref: "#/definitions/parameters/user_id"
        - in: body
          name: edit one
          description: The user to create.
          schema:
            $ref: "#/definitions/edit_user"
      responses:
        "202":
          $ref: "#/definitions/edit_user"
        "400":
          $ref: "#/definitions/error"
    get:
      description: description
      summary: get one
      tags:
        - user
      parameters:
        - $ref: "#/definitions/parameters/user_id"
      responses:
        "200":
          $ref: "#/definitions/get_user"
        "400":
          $ref: "#/definitions/error"
  /api/login:
    post:
      description: post to login route
      summary: >-
        calls the loginWithEmail, passing in request body calls the set session
        function - will set session.user_id = user.id, session.cookie.theme =
        "cute" session.email = user.email
      tags:
        - user
      parameters:
        - in: body
          name: verifyuser
          description: The user to create.
          schema:
            $ref: "#/definitions/verify_user"
      responses:
        "200":
          description: >-
            redirect to dashboard, starts user session (req.session.user_id =
            id) should also get token back
        "400":
          description: renders to error page, passing in message from db
  /api/signup:
    post:
      description: post to signup route
      summary: >-
        calls the set session function - will set session.user_id = user.id,
        session.cookie.theme = "cute" session.email = user.email
      tags:
        - user
      parameters:
        - in: body
          name: postuser
          description: The user to create.
          schema:
            $ref: "#/definitions/post_user"
      responses:
        "200":
          description: >-
            redirect to dashboard, starts user session (req.session.user = id),
            should get back token too
        "400":
          description: renders to error page, passing in message from db
  /middleware:
    get:
      description: request (so all requests to the server) middleware
      summary: null
      tags:
        - middleware
      responses:
        "200":
          description: will check that the request session has user id
        "400":
          $ref: "#/definitions/error"
definitions:
  error:
    properties:
      message:
        description: Error message
        type: string
      error_location:
        description: file location
        type: string
      error_detail:
        description: detail of error
        type: string
  parameters:
    user_id:
      name: user_id
      in: path
      description: user_id
      required: true
      schema:
        type: string
    task_id:
      name: task_id
      in: path
      description: task_id
      required: true
      schema:
        type: string
    timer_id:
      name: timer_id
      in: path
      description: timer_id
      required: true
      schema:
        type: string
    problem_id:
      name: problem_id
      in: path
      description: problem_id
      required: true
      schema:
        type: string
    cheatsheet_id:
      name: cheatsheet_id
      in: path
      description: cheatsheet_id
      required: true
      schema:
        type: string
    tag_snippet_id:
      name: tag_snippet_id
      in: path
      description: tag_snippet_id
      required: true
      schema:
        type: string
    table_name:
      name: table_name
      in: path
      description: table_name
      required: true
      schema:
        type: string
    table_name2:
      name: table_name2
      in: path
      description: table_name2
      required: true
      schema:
        type: string
    hourglass_condition:
      name: hourglass_condition
      in: path
      description: >-
        hourglass condition - can be condition can be difficulty, importance,
        status, created, edit, seconds, end
      required: true
      schema:
        type: string
  render:
    message:
      name: message
      in: object
      description: message string that you pass in when you render the error page
      required: false
      schema:
        type: string
    theme:
      name: theme
      in: object
      description: theme
      required: false
      schema:
        type: string
    quote:
      name: quote
      in: object
      description: quote on auth page
      required: true
      schema:
        type: string
    problem_tasks:
      name: problem tasks
      in: object
      description: problem tasks
      required: true
      schema:
        type: array
  responses:
    Success:
      description: Success
    Created:
      description: Created
      content:
        text/plain:
          schema:
            type: string
    ErrorBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/definitions/error"
  post_problem:
    title: post_problem
    example:
      problem: ""
      whatshouldbe: ""
      whatactuallyis: ""
      hypothesis: ""
      plan: ""
      status: to do
      importance: high
      difficulty: easy
      end: "2022-03-03T00:00:00.000Z"
      email: ryanyiu@bu.edu
      public: public
    type: object
    properties:
      problem:
        type: string
      whatshouldbe:
        type: string
      whatactuallyis:
        type: string
      hypothesis:
        type: string
      plan:
        type: string
      status:
        type: string
      importance:
        type: string
      difficulty:
        type: string
      end:
        type: string
      email:
        type: string
      public:
        type: string
  get_problem:
    title: get_problem
    example:
      id: 14
      problem_user_id: 4
      problem_hourglass_id: 23
      problem: "this is not being used frequently enough "
      whatshouldbe: this should be used, tracking things so you stay focused
      whatactuallyis: "i think i just pull it up when i need to "
      hypothesis: >-
        i think it's because i'm not planning it out well enough or like
        spending too much time on the internet or having too high expectations
      plan: >-
        i think make a checklist and honestly keep yourself accountable by
        sending what you are going to do to ryan or something
      problem_id: 14
      hourglass_id: 23
      user_id: 4
      hourglass_user_id: 4
      importance: medium
      difficulty: hard
      email: null
      start: "2021-09-03T21:21:52.000Z"
      edit: "2021-12-20T08:10:11.927Z"
      end: "2021-11-27T08:27:40.000Z"
      public: false
      status: done
      format_start: 05:21:52 September 4, 2021
      format_edit: 16:10:11 December 20, 2021
      format_end: 16:27:40 November 27, 2021
    type: object
    properties:
      id:
        type: number
      problem_user_id:
        type: number
      problem_hourglass_id:
        type: number
      problem:
        type: string
      whatshouldbe:
        type: string
      whatactuallyis:
        type: string
      hypothesis:
        type: string
      plan:
        type: string
      problem_id:
        type: number
      hourglass_id:
        type: number
      user_id:
        type: number
      hourglass_user_id:
        type: number
      seconds:
        type: number
      importance:
        type: string
      difficulty:
        type: string
      email:
        type: string
      start:
        type: string
      edit:
        type: string
      end:
        type: string
      public:
        type: boolean
      status:
        type: string
      format_start:
        type: string
      format_edit:
        type: string
      format_end:
        type: string
  edit_problem:
    title: edit_problem
    example:
      problem: ""
      whatshouldbe: ""
      whatactuallyis: ""
      hypothesis: ""
      plan: ""
      status: to do
      importance: high
      difficulty: easy
      end: "2022-03-03T00:00:00.000Z"
    type: object
    properties:
      problem:
        type: string
      whatshouldbe:
        type: string
      whatactuallyis:
        type: string
      hypothesis:
        type: string
      plan:
        type: string
      status:
        type: string
      importance:
        type: string
      difficulty:
        type: string
      end:
        type: string
  post_user:
    title: signuprequest
    example:
      firstName: lesley
      lastName: cheung
      email: test2@gmail.com
      password: password
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
    required:
      - firstName
      - lastName
      - email
      - password
  get_user:
    type: object
    properties:
      id:
        type: number
      gmail_id:
        type: string
      facebook_id:
        type: string
      linkedin_id:
        type: string
      spotify_id:
        type: string
      name:
        type: string
      email:
        type: string
      verified:
        type: object
        properties: null
      hash:
        type: string
      created:
        type: string
      token:
        type: string
  edit_user:
    title: edituserrequest
    example:
      email: newemail@email.com
    type: object
    properties:
      email:
        type: string
    required:
      - email
  verify_user:
    title: post user
    example:
      email: test2@gmail.com
      password: password
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
