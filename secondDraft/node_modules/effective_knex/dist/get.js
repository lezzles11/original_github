const make_legit = require("make_legit")
const { see, hourglass } = require("code_clarity")
const { upset } = require("whats_wrong")
const { cleanPostObject } = require("./cleanPostObject")
const { callbacks } = require("./data.js")
const { getObject } = require("./getObject")
const { getForeignTables } = require("./getInfo")
const { tableColValCount } = require("./counts")
const { cleanUpdateObject } = require("./cleanUpdateObject")
const knex = require("knex")({
        client: "postgresql",
        connection: {
            database: "optee3",
            user: "postgres",
            password: "postgres",
        }
    })
    /**
    * @example
    * // getOne(knex, "hourglass", 11).then((result) => {
       //     console.log(result)
       // })
    * @author zen-out
    * @date 2022-03-10
    * @returns {object}
    */
async function getOneById(knex, table, id) {
    try {
        let object = await knex(table).select("*").where({ id: id })
        let cleanedThis = getObject(object);
        return make_legit.trimObj(cleanedThis)
    } catch (error) {
        upset("not able to get one" + error, "effective_knex, get one", "should be able to return an object")
        return []
    }
}



/**
* @example
* // getOne(knex, "hourglass", 11).then((result) => {
   //     console.log(result)
   // })
* @author zen-out
* @date 2022-03-10
* @returns {object}
*/
async function getOneByKeyAndValue(knex, table, key, value) {
    try {
        let object = await knex(table).select("*").where(key, value)
        let cleanedThis = getObject(object);
        return make_legit.trimObj(cleanedThis)
    } catch (error) {
        upset("not able to get one" + error, "effective_knex, get one", "should be able to return an object")
        return []
    }
}

/**
 * @example
 *   let result2 = await getByKeyValue(knex, "user", "id", 4).then((result) => {
        console.log(result)
    })
 * @author zen-out
 * @date 2022-03-15
 * @returns {array}
 */
async function getByKeyValue(knex, table, key, value) {
    let newArr = []
    try {
        let returnArr = await knex(table).select("*").where(key, value)
        for (let i = 0; i < returnArr.length; i++) {
            newArr.push(returnArr[i])
        }
        return make_legit.trimArr(newArr);
    } catch (error) {
        upset("not able to get one" + error, "effective_knex, get one", "should be able to return an object")
        return []
    }
}

/**
 * @example
 * await getByObject(knex, "user", {priority: 2})
 * @author github.com/zen-out
 */
async function getByObject(knex, table, object) {
    let newArr = []
    try {
        let returnArr = await knex(table).select("*").where(object)
        for (let i = 0; i < returnArr.length; i++) {
            newArr.push(returnArr[i])
        }
        return make_legit.trimArr(newArr);
    } catch (error) {
        upset("not able to get one" + error, "effective_knex, get one", "should be able to return an object")
        return []
    }
}


/**
 * @example
 *  // getAll(knex, "hourglass").then((result) => {
    //     console.log(result)
    // })
 * @author zen-out
 * @date 2022-03-10
 * @returns {array}
 */
async function getAll(knex, table) {
    try {
        let all = await knex(table).select("*")
        return make_legit.trimArr(all);
    } catch (error) {
        upset("not able to get one" + error, "effective_knex, get one", "should be able to return an object")
        return []
    }
}


async function testBasic() {
    let result5 = await getOneByKeyAndValue(knex, "user", "email", "lesleyc@bu.edu").then((result) => {
        console.log(result)
    })
    let result1 = await getOneById(knex, "hourglass", 11).then((result) => {
        let check = typeof result === "object"
        return check;
    })
    let result = await getAll(knex, "hourglass").then((result) => {
        let check = typeof result === "object"
        return check;
    })
    let result2 = await getByKeyValue(knex, "user", "id", 4).then((result) => {
        // console.log(result)
        console.log(result.length)
    })
    let result4 = await getByObject(knex, "hourglass", { user_id: 4, importance: 1, usefulness: 1, }).then((result) => {
        // console.log(result)
        // console.log(result.length)
    })
    let getResults = result1 && result
    see.done("TEST: get one and get all", getResults)
}
// testBasic()

module.exports = { getOneById, getOneByKeyAndValue, getByKeyValue, getByObject, getAll, testBasic };